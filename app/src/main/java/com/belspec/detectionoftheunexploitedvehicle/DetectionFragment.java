package com.belspec.detectionoftheunexploitedvehicle;

import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Address;
import android.location.Geocoder;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.Toast;

import com.belspec.detectionoftheunexploitedvehicle.Adapters.ImageListAdapter;
import com.belspec.detectionoftheunexploitedvehicle.Gps.GPSTracker;
import com.belspec.detectionoftheunexploitedvehicle.Gps.Gps;
import com.belspec.detectionoftheunexploitedvehicle.Interface.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Image;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Request.CreateDetectionRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Request.ImageList;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Response.CreateDetectionResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Contractor;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Manufacture;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Model;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.PoliceDepartment;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Request.GetDefaultDataRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Response.GetDefaultDataResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.Utils.Converter;
import com.belspec.detectionoftheunexploitedvehicle.Utils.Encode;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import retrofit2.Response;


public class DetectionFragment extends Fragment implements View.OnClickListener, ResponseListener{
    AutoCompleteTextView actvManufacture;
    AutoCompleteTextView actvModel;
    ScrollView svMain;
    Spinner spnContractor;
    Spinner spnPoliceDepartment;
    EditText edtVIN;
    EditText edtCarID;
    EditText edtColor;
    EditText edtStreet;
    Switch swTypeVehicle;
    Button btnRegistrate;
    RecyclerView rvImageList;
    Button btnAddImage;
    View mView;
    ProgressBar pbLoading;
    private static DetectionFragment instance;
    final int REQUEST_CODE_PHOTO = 1;
    final String TAG = "myLogs";


    @Override
    public View onCreateView(LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.detection_fragment, null);
        return  mView;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }

    @Override
    public void onViewStateRestored(Bundle savedInstanceState) {
        super.onViewStateRestored(savedInstanceState);
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        initViews();
        initComponents();
    }

    public static DetectionFragment getInstance(){
        if (instance==null){
            instance = new DetectionFragment();
        }
        return instance;
    }

    private void initViews(){
        actvManufacture = (AutoCompleteTextView) mView.findViewById(R.id.actvManufacture);
        actvModel = (AutoCompleteTextView) mView.findViewById(R.id.actvModel);
        spnContractor = (Spinner) mView.findViewById(R.id.spnContractor);
        spnPoliceDepartment = (Spinner) mView.findViewById(R.id.spnPoliceDepartment);
        btnRegistrate = (Button)mView.findViewById(R.id.btnRegister);
        edtCarID = (EditText)mView.findViewById(R.id.edtCarID);
        edtVIN = (EditText)mView.findViewById(R.id.edtVIN);
        edtStreet = (EditText)mView.findViewById(R.id.edtStreet);
        swTypeVehicle = (Switch)mView.findViewById(R.id.swType);
        edtColor = (EditText)mView.findViewById(R.id.edtColor);
        rvImageList = (RecyclerView)mView.findViewById(R.id.rvImageList);
        btnAddImage = (Button)mView.findViewById(R.id.btnAddImage);
        svMain = (ScrollView)mView.findViewById(R.id.svDetection);
        pbLoading = (ProgressBar)mView.findViewById(R.id.pbLoading);
    }

    private void initComponents() {
        if (actvManufacture != null){
            actvManufacture.setText("");
        }
        if (actvModel != null){
            actvModel.setText("");
        }
        if (edtCarID != null) {
            edtCarID.setText("");
        }
        if (edtStreet!=null){
            edtStreet.setText("");
        }
        if(edtVIN!=null){
            edtVIN.setText("");
        }
        if(edtColor!=null){
            edtColor.setText("");
        }
        if (swTypeVehicle!= null){
            swTypeVehicle.setChecked(false);
        }
        if (rvImageList != null){
            rvImageList.setLayoutManager(new GridLayoutManager(getActivity(),3));
            rvImageList.setAdapter(ImageListAdapter.getInstance());
        }
        if (btnAddImage!=null){
            btnAddImage.setOnClickListener(this);
        }
        if (btnRegistrate!=null){
            btnRegistrate.setOnClickListener(this);
        }
        pbLoading.setVisibility(View.VISIBLE);
        svMain.setVisibility(View.GONE);

        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetDefaultDataResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetDefaultData(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetDefaultDataRequestEnvelope()
        ).enqueue(call);
    }



    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case (R.id.btnRegister):
                svMain.setVisibility(View.GONE);
                pbLoading.setVisibility(View.VISIBLE);
                RetrofitService createDataRetrofit = Api.createRetrofitService();
                MyCallback<CreateDetectionResponseEnvelope> createDataCall = new MyCallback<>();
                createDataCall.addResponseListener(this);

                ImageList imageList =  new ImageList();
                int count = ImageListAdapter.getInstance().getItemCount();
                if (count>0){
                    for (int i = 0; i < count; i++){
                        imageList.addImage(new Image().setData(Converter.encodeToBase64(ImageListAdapter.getInstance().getFilePath(i))));
                    }
                }else{
                    imageList.addImage(new Image().setData(""));
                }

                createDataRetrofit.executeCreateData(
                        Encode.getBasicAuthTemplate(
                                UserManager.getInstanse().getmLogin(),
                                UserManager.getInstanse().getmPassword()
                        ),
                        new CreateDetectionRequestEnvelope(
                                actvManufacture.getText().toString(),
                                actvModel.getText().toString(),
                                spnContractor.getSelectedItem().toString(),
                                spnPoliceDepartment.getSelectedItem().toString(),
                                ((swTypeVehicle.isChecked())?"2":"1"),
                                 edtCarID.getText().toString(),
                                edtStreet.getText().toString(),
                                edtVIN.getText().toString(),
                                edtColor.getText().toString(),
                                imageList
                        )
                ).enqueue(createDataCall);

                break;
            case (R.id.btnAddImage):
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            //      intent.putExtra(MediaStore.EXTRA_OUTPUT, generateFileUri(TYPE_PHOTO));
                if (intent.resolveActivity(getActivity().getPackageManager()) != null) {
                    File photoFile = null;
                    try {
                        photoFile = createImageFile();
                    } catch (IOException ex) {

                    }
                    // Continue only if the File was successfully created
                    if (photoFile != null) {
                        Uri photoURI = Uri.fromFile(photoFile);
//                        FileProvider.getUriForFile(getActivity(),
//                                "com.belspec.detectionoftheunexploitedvehicle",
//                                );
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                        startActivityForResult(intent, REQUEST_CODE_PHOTO);

                    }
                }

                break;
        }

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                GPSTracker gps = new GPSTracker(getActivity());
                // Check if GPS enabled
                if(gps.canGetLocation()) {
                    double latitude = gps.getLatitude();
                    double longitude = gps.getLongitude();
                    ExifInterface exif = null;
                    try {
                        Converter.compressImage(ImageListAdapter.getInstance().getCurrentPath(), Bitmap.CompressFormat.JPEG, 30);
                        exif = new ExifInterface(ImageListAdapter.getInstance().getCurrentPath());
                        exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, Gps.convert(latitude));
                        exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF, Gps.latitudeRef(latitude));
                        exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, Gps.convert(longitude));
                        exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF, Gps.longitudeRef(longitude));
                        exif.saveAttributes();
                        BitmapFactory.Options opt = new BitmapFactory.Options();
                        opt.inSampleSize = 8;
                        Bitmap bitmap = BitmapFactory.decodeFile(ImageListAdapter.getInstance().getCurrentPath(), opt);
                        Log.d(TAG, "bitmap " + bitmap.getWidth() + " x "
                                + bitmap.getHeight());
                        ImageListAdapter.getInstance().add(bitmap);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    gps.showSettingsAlert();
                }
            }
        }else if (resultCode == Activity.RESULT_CANCELED) {
            Log.d(TAG, "Canceled");
        }
    }




    @Override
    public void AuthorizationOK(Response response) {
        if (response.body().getClass() == GetDefaultDataResponseEnvelope.class){
            pbLoading.setVisibility(View.GONE);
            svMain.setVisibility(View.VISIBLE);
            GetDefaultDataResponseEnvelope responseEnvelope = (GetDefaultDataResponseEnvelope)response.body();
            List<Manufacture> manufactures = responseEnvelope.body().getManufactureList();
            ArrayList<String> stringArrayManufactureList = new ArrayList<>();
            for ( Manufacture manufacture : manufactures) {
                stringArrayManufactureList.add(manufacture.getName());
            }
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayManufactureList );
           actvManufacture.setAdapter(arrayAdapterManufacture);

            List<Model> models = responseEnvelope.body().getModelList();
            ArrayList<String> stringArrayModelList = new ArrayList<>();
            for ( Model model : models) {
                stringArrayModelList.add(model.getName());
            }
            ArrayAdapter<String> arrayAdapterModel  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayModelList );
            actvModel.setAdapter(arrayAdapterModel);

            List<Contractor> contractors = responseEnvelope.body().getContractorList();
            ArrayList<String> stringArrayContractorList = new ArrayList<>();
            for ( Contractor contractor : contractors) {
                stringArrayContractorList.add(contractor.getName());
            }
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayContractorList );
            spnContractor.setAdapter(arrayAdapterContractor);

            List<PoliceDepartment> policeDepartments = responseEnvelope.body().getPoliceDepartmentList();
            ArrayList<String> stringArrayPoliceDepartments = new ArrayList<>();
            for ( PoliceDepartment policeDepartment : policeDepartments) {
                stringArrayPoliceDepartments.add(policeDepartment.getName());
            }
            ArrayAdapter<String> arrayAdapterPoliceDepartments  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayPoliceDepartments );
            spnPoliceDepartment.setAdapter(arrayAdapterPoliceDepartments);


            try {
                Context context = getView().getContext();
                Geocoder geocoder = new Geocoder(context, Locale.getDefault());
                GPSTracker gpsTracker = new GPSTracker(context);
                List<Address> addresses = geocoder.getFromLocation(gpsTracker.getLatitude(), gpsTracker.getLongitude(), 1);
                    if (addresses != null) {
                        Address returnedAddress = addresses.get(0);
                        StringBuilder strReturnedAddress = new StringBuilder("");

                        for (int i = 0; i < returnedAddress.getMaxAddressLineIndex(); i++) {
                            strReturnedAddress.append(returnedAddress.getAddressLine(i)).append("\n");
                        }
                        edtStreet.setText(strReturnedAddress.toString());
                    } else {
                        edtStreet.setText("");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            Log.d("ERROR", response.message());
        }else if(response.body().getClass() == CreateDetectionResponseEnvelope.class){
            CreateDetectionResponseEnvelope responseEnvelope = (CreateDetectionResponseEnvelope) response.body();
            pbLoading.setVisibility(View.GONE);
            svMain.setVisibility(View.GONE);
            Toast.makeText(getActivity(), "Registered by ID: " + responseEnvelope.getDocId(), Toast.LENGTH_LONG).show();
            Log.d("ERROR", responseEnvelope.getDocId());
            ImageListAdapter.getInstance().clear();
            instance = null;
        }

    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this.getActivity(), "Wrong authorization. Response code: " + response.code()+ " " + response.message(), Toast.LENGTH_SHORT).show();
        pbLoading.setVisibility(View.GONE);
        svMain.setVisibility(View.VISIBLE);
        Log.d("ERROR", response.message());
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this.getActivity(), "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        pbLoading.setVisibility(View.GONE);
        svMain.setVisibility(View.VISIBLE);
        Log.d("ERROR", t.getLocalizedMessage() + t.getMessage());
    }



    private File createImageFile() throws IOException {
        // Create an image file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = getActivity().getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
                imageFileName,  /* prefix */
                ".jpg",         /* suffix */
                storageDir      /* directory */
        );

        // Save a file: path for use with ACTION_VIEW intents
        ImageListAdapter.getInstance().setCurrentPath(image.getAbsolutePath());
        ImageListAdapter.getInstance().addFilePath(image.getAbsolutePath());
        return image;
    }

    private void clear(){
        instance = null;
        ImageListAdapter.getInstance().clear();
    }
}
