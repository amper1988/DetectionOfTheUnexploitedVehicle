package com.belspec.detectionoftheunexploitedvehicle;

import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Parcelable;
import android.provider.MediaStore;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.Toast;

import com.belspec.detectionoftheunexploitedvehicle.Adapters.ImageListAdapter;
import com.belspec.detectionoftheunexploitedvehicle.Interface.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Image;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Request.CreateDetectionRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Request.ImageList;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Response.CreateDetectionResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Contractor;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Manufacture;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Model;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.PoliceDepartment;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Request.GetDefaultDataRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Response.GetDefaultDataResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.Utils.Converter;
import com.belspec.detectionoftheunexploitedvehicle.Utils.Encode;
import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;


public class DetectionFragment extends Fragment implements View.OnClickListener, ResponseListener{
    AutoCompleteTextView actvManufacture;
    AutoCompleteTextView actvModel;
    ScrollView svMain;
    Spinner spnContractor;
    Spinner spnPoliceDepartment;
    EditText edtVIN;
    EditText edtCarID;
    EditText edtColor;
    EditText edtStreet;
    Switch swTypeVehicle;
    Button btnRegistrate;
    RecyclerView rvImageList;
    Button btnAddImage;
    LoadingFragment loadingFragment;
    ImageListAdapter imageListAdapter;
    Context mContext;
    GridLayoutManager glm;
    View mView;
    ProgressBar pbLoading;
    final int REQUEST_CODE_PHOTO = 1;
    final String TAG = "myLogs";


    @Override
    public View onCreateView(LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.detection_fragment, null);
        return  mView;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }

    @Override
    public void onViewStateRestored(Bundle savedInstanceState) {
        super.onViewStateRestored(savedInstanceState);
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        mContext = context;
        if (imageListAdapter==null){
            imageListAdapter = ImageListAdapter.getInstance();
            glm = new GridLayoutManager(mContext,3);
        }
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        initViews();
        initComponents();
    }

    private void initViews(){
        actvManufacture = (AutoCompleteTextView) mView.findViewById(R.id.actvManufacture);
        actvModel = (AutoCompleteTextView) mView.findViewById(R.id.actvModel);
        spnContractor = (Spinner) mView.findViewById(R.id.spnContractor);
        spnPoliceDepartment = (Spinner) mView.findViewById(R.id.spnPoliceDepartment);
        btnRegistrate = (Button)mView.findViewById(R.id.btnRegister);
        edtCarID = (EditText)mView.findViewById(R.id.edtCarID);
        edtVIN = (EditText)mView.findViewById(R.id.edtVIN);
        edtStreet = (EditText)mView.findViewById(R.id.edtStreet);
        swTypeVehicle = (Switch)mView.findViewById(R.id.swType);
        edtColor = (EditText)mView.findViewById(R.id.edtColor);
        rvImageList = (RecyclerView)mView.findViewById(R.id.rvImageList);
        btnAddImage = (Button)mView.findViewById(R.id.btnAddImage);
        svMain = (ScrollView)mView.findViewById(R.id.svDetection);
        pbLoading = (ProgressBar)mView.findViewById(R.id.pbLoading);
    }

    private void initComponents() {
        if (actvManufacture != null){
            actvManufacture.setText("");
        }
        if (actvModel != null){
            actvModel.setText("");
        }
        if (edtCarID != null) {
            edtCarID.setText("");
        }
        if (edtStreet!=null){
            edtStreet.setText("");
        }
        if(edtVIN!=null){
            edtVIN.setText("");
        }
        if(edtColor!=null){
            edtColor.setText("");
        }
        if (swTypeVehicle!= null){
            swTypeVehicle.setChecked(false);
        }
        if (rvImageList != null){
            rvImageList.setLayoutManager(glm);
            rvImageList.setAdapter(imageListAdapter);
        }
        if (btnAddImage!=null){
            btnAddImage.setOnClickListener(this);
        }
        if (btnRegistrate!=null){
            btnRegistrate.setOnClickListener(this);
        }
        pbLoading.setVisibility(View.GONE);

        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetDefaultDataResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetDefaultData(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetDefaultDataRequestEnvelope()
        ).enqueue(call);
    }



    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case (R.id.btnRegister):
                svMain.setVisibility(View.GONE);
                pbLoading.setVisibility(View.VISIBLE);
                RetrofitService createDataRetrofit = Api.createRetrofitService();
                MyCallback<CreateDetectionResponseEnvelope> createDataCall = new MyCallback<>();
                createDataCall.addResponseListener(this);

                ImageList imageList =  new ImageList();
                int count = imageListAdapter.getItemCount();
                if (count>0){
                    for (int i = 0; i < count; i++){
                        imageList.addImage(new Image().setData(Converter.encodeToBase64(imageListAdapter.getByPosition(i), Bitmap.CompressFormat.JPEG, 100)));
                    }
                }else{
                    imageList.addImage(new Image().setData(""));
                }

                createDataRetrofit.executeCreateData(
                        Encode.getBasicAuthTemplate(
                                UserManager.getInstanse().getmLogin(),
                                UserManager.getInstanse().getmPassword()
                        ),
                        new CreateDetectionRequestEnvelope(
                                actvManufacture.getText().toString(),
                                actvModel.getText().toString(),
                                spnContractor.getSelectedItem().toString(),
                                spnPoliceDepartment.getSelectedItem().toString(),
                                ((swTypeVehicle.isChecked())?"2":"1"),
                                 edtCarID.getText().toString(),
                                edtStreet.getText().toString(),
                                edtVIN.getText().toString(),
                                edtColor.getText().toString(),
                                imageList
                        )
                ).enqueue(createDataCall);
                imageListAdapter.clear();
                break;
            case (R.id.btnAddImage):
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            //      intent.putExtra(MediaStore.EXTRA_OUTPUT, generateFileUri(TYPE_PHOTO));
                startActivityForResult(intent, REQUEST_CODE_PHOTO);
                break;
        }

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                if (intent == null) {
                    Log.d(TAG, "Intent is null");
                } else {
                    Log.d(TAG, "Photo uri: " + intent.getData());
                    Bundle bndl = intent.getExtras();
                    if (bndl != null) {
                        Object obj = intent.getExtras().get("data");
                        if (obj instanceof Bitmap) {
                            Bitmap bitmap = (Bitmap) obj;
                            Log.d(TAG, "bitmap " + bitmap.getWidth() + " x "
                                    + bitmap.getHeight());
                            imageListAdapter.add(bitmap);
                            rvImageList.setAdapter(imageListAdapter);
                            imageListAdapter.notifyDataSetChanged();
                        }
                    }
                }
            } else if (resultCode == Activity.RESULT_CANCELED) {
                Log.d(TAG, "Canceled");
            }
        }
    }



    @Override
    public void AuthorizationOK(Response response) {
        if (response.body().getClass() == GetDefaultDataResponseEnvelope.class){
            GetDefaultDataResponseEnvelope responseEnvelope = (GetDefaultDataResponseEnvelope)response.body();
            List<Manufacture> manufactures = responseEnvelope.body().getManufactureList();
            ArrayList<String> stringArrayManufactureList = new ArrayList<>();
            for ( Manufacture manufacture : manufactures) {
                stringArrayManufactureList.add(manufacture.getName());
            }
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayManufactureList );
           actvManufacture.setAdapter(arrayAdapterManufacture);

            List<Model> models = responseEnvelope.body().getModelList();
            ArrayList<String> stringArrayModelList = new ArrayList<>();
            for ( Model model : models) {
                stringArrayModelList.add(model.getName());
            }
            ArrayAdapter<String> arrayAdapterModel  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayModelList );
            actvModel.setAdapter(arrayAdapterModel);

            List<Contractor> contractors = responseEnvelope.body().getContractorList();
            ArrayList<String> stringArrayContractorList = new ArrayList<>();
            for ( Contractor contractor : contractors) {
                stringArrayContractorList.add(contractor.getName());
            }
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayContractorList );
            spnContractor.setAdapter(arrayAdapterContractor);

            List<PoliceDepartment> policeDepartments = responseEnvelope.body().getPoliceDepartmentList();
            ArrayList<String> stringArrayPoliceDepartments = new ArrayList<>();
            for ( PoliceDepartment policeDepartment : policeDepartments) {
                stringArrayPoliceDepartments.add(policeDepartment.getName());
            }
            ArrayAdapter<String> arrayAdapterPoliceDepartments  = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_list_item_1, stringArrayPoliceDepartments );
            spnPoliceDepartment.setAdapter(arrayAdapterPoliceDepartments);
            Log.d("ERROR", response.message());
        }else if(response.body().getClass() == CreateDetectionResponseEnvelope.class){
            CreateDetectionResponseEnvelope responseEnvelope = (CreateDetectionResponseEnvelope) response.body();
            pbLoading.setVisibility(View.GONE);
            svMain.setVisibility(View.VISIBLE);
            Toast.makeText(mContext, "Registered by ID: " + responseEnvelope.getDocId(), Toast.LENGTH_LONG).show();
            Log.d("ERROR", responseEnvelope.getDocId());
//            getFragmentManager().beginTransaction().remove(this).commit();
        }

    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this.getActivity(), "Wrong authorization. Response code: " + response.code()+ " " + response.message(), Toast.LENGTH_SHORT).show();
        pbLoading.setVisibility(View.GONE);
        svMain.setVisibility(View.VISIBLE);
        Log.d("ERROR", response.message());
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this.getActivity(), "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        pbLoading.setVisibility(View.GONE);
        svMain.setVisibility(View.VISIBLE);
        Log.d("ERROR", t.getLocalizedMessage() + t.getMessage());
    }
}
