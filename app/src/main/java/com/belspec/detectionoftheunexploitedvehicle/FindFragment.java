package com.belspec.detectionoftheunexploitedvehicle;

import android.app.Fragment;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.Toast;

import com.belspec.detectionoftheunexploitedvehicle.Adapters.DetectionDocListAdapter;
import com.belspec.detectionoftheunexploitedvehicle.Interface.EndlessRecyclerViewScrollLisnener;
import com.belspec.detectionoftheunexploitedvehicle.Interface.RecyclerItemClickListener;
import com.belspec.detectionoftheunexploitedvehicle.Interface.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.GetDetectionList.Request.GetDetectionListRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.DetectionDoc;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.GetDetectionList.Response.GetDetectionListResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.Contractor;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.Manufacture;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Request.GetDefaultDataRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Response.GetDefaultDataResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.Utils.Encode;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;


public class FindFragment extends Fragment implements View.OnClickListener,  ResponseListener{
    Button btnFind;
    EditText edtCarId;
    EditText edtVin;
    AutoCompleteTextView actvManuf;
    Spinner spnContractor;
    RecyclerView rvDetectionList;
    View mView;
    ProgressBar pbTakingData;
    EndlessRecyclerViewScrollLisnener endlessRecyclerViewScrollLisnener;
    LinearLayoutManager llm;
    ArrayList<String> stringArrayManufactureList;
    ArrayList<String> stringArrayContractorList;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.find_fragment, container, false);
        initViews();
        initComponents(savedInstanceState);
        return mView;
    }

    private void initViews(){
        btnFind = (Button)mView.findViewById(R.id.btnFindDetection);
        edtCarId = (EditText)mView.findViewById(R.id.edtFindByCarId);
        edtVin = (EditText)mView.findViewById(R.id.edtFindByVin);
        rvDetectionList = (RecyclerView)mView.findViewById(R.id.rvDetectionList);
        spnContractor = (Spinner)mView.findViewById(R.id.spnFindByContractor);
        actvManuf = (AutoCompleteTextView)mView.findViewById(R.id.actvFindByManufacture);
        pbTakingData = (ProgressBar)mView.findViewById(R.id.pbTakinData);
    }

    private void initComponents(Bundle savedInstanceState){
        btnFind.setOnClickListener(this);
        llm = new LinearLayoutManager(getActivity());
        rvDetectionList.setLayoutManager(llm);
        rvDetectionList.setAdapter(DetectionDocListAdapter.getInstance());
        endlessRecyclerViewScrollLisnener = new EndlessRecyclerViewScrollLisnener(llm) {
            @Override
            public void onLoadMore(int page, int totalItemsCount) {
                loadMoreDataFromServer(page);
            }
        };
        rvDetectionList.addOnScrollListener(endlessRecyclerViewScrollLisnener);
        rvDetectionList.addOnItemTouchListener(new RecyclerItemClickListener(getActivity(), new RecyclerItemClickListener.OnItemClickListener() {
            @Override
            public void onItemClick(View view, int position) {
                Intent intent = new Intent(getActivity(), EvacuationActivity.class);
                intent.putExtra(DetectionDoc.class.getCanonicalName(), DetectionDocListAdapter.getInstance().getItem(position));
                startActivity(intent);
            }
        }));

        if (savedInstanceState == null){
            DetectionDocListAdapter.getInstance().clear();
            rvDetectionList.setVisibility(View.GONE);
            pbTakingData.setVisibility(View.VISIBLE);
            RetrofitService retrofitService = Api.createRetrofitService();
            MyCallback<GetDefaultDataResponseEnvelope> call = new MyCallback<>();
            call.addResponseListener(this);
            retrofitService.executeGetDefaultData(
                    Encode.getBasicAuthTemplate(
                            UserManager.getInstanse().getmLogin(),
                            UserManager.getInstanse().getmPassword()
                    ),
                    new GetDefaultDataRequestEnvelope()
            ).enqueue(call);
        }else{
            endlessRecyclerViewScrollLisnener.setCurrentPage(savedInstanceState.getInt("currentPage") );
            rvDetectionList.setAdapter(DetectionDocListAdapter.getInstance());
            rvDetectionList.setVisibility(View.VISIBLE);
            pbTakingData.setVisibility(View.GONE);
            stringArrayContractorList = savedInstanceState.getStringArrayList("contractorList");
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayContractorList );
            spnContractor.setAdapter(arrayAdapterContractor);
            spnContractor.setSelection(savedInstanceState.getInt("itemContractorPosition"));
            stringArrayManufactureList = savedInstanceState.getStringArrayList("manufactureList");
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<>(this.getActivity(),R.layout.spinner_item , stringArrayManufactureList );
            actvManuf.setAdapter(arrayAdapterManufacture);
        }

    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putStringArrayList("manufactureList", stringArrayManufactureList);
        outState.putStringArrayList("contractorList", stringArrayContractorList);
        outState.putInt("itemContractorPosition", spnContractor.getSelectedItemPosition());
        outState.putInt("currentPage", endlessRecyclerViewScrollLisnener.getCurrentPage() );
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.btnFindDetection:
                DetectionDocListAdapter.getInstance().clear();
                rvDetectionList.setAdapter(DetectionDocListAdapter.getInstance());
                rvDetectionList.setVisibility(View.GONE);
                pbTakingData.setVisibility(View.VISIBLE);
                loadMoreDataFromServer(1);
                break;
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if (response.body().getClass() == GetDefaultDataResponseEnvelope.class){

            GetDefaultDataResponseEnvelope responseEnvelope = (GetDefaultDataResponseEnvelope)response.body();
            List<Manufacture> manufactures = responseEnvelope.body().getManufactureList();
            stringArrayManufactureList = new ArrayList<>();
            for ( Manufacture manufacture : manufactures) {
                stringArrayManufactureList.add(manufacture.getName());
            }
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<>(this.getActivity(),R.layout.spinner_item , stringArrayManufactureList );
            actvManuf.setAdapter(arrayAdapterManufacture);

            List<Contractor> contractors = responseEnvelope.body().getContractorList();
            stringArrayContractorList = new ArrayList<>();
            for ( Contractor contractor : contractors) {
                stringArrayContractorList.add(contractor.getName());
            }
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayContractorList );
            spnContractor.setAdapter(arrayAdapterContractor);
            pbTakingData.setVisibility(View.GONE);
            rvDetectionList.setVisibility(View.VISIBLE);
        }else if (response.body().getClass() == GetDetectionListResponseEnvelope.class){
            pbTakingData.setVisibility(View.GONE);
            rvDetectionList.setVisibility(View.VISIBLE);
            GetDetectionListResponseEnvelope responseEnvelope = (GetDetectionListResponseEnvelope)response.body();
            List<DetectionDoc> detectionDocs = responseEnvelope.getDetectionList();
            if (detectionDocs!=null) {
                DetectionDocListAdapter.getInstance().addDetectionList(detectionDocs);

            }else{
                Toast.makeText(getActivity(), "No more element", Toast.LENGTH_SHORT).show();
            }
        }
    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this.getActivity(), "Wrong authorization. Response code: " + response.code()+ " " + response.message(), Toast.LENGTH_SHORT).show();
        Log.d("ERROR", response.message());
        pbTakingData.setVisibility(View.GONE);
        rvDetectionList.setVisibility(View.VISIBLE);
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this.getActivity(), "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        Log.d("ERROR", t.getLocalizedMessage() + t.getMessage());
        pbTakingData.setVisibility(View.GONE);
        rvDetectionList.setVisibility(View.VISIBLE);
    }

    public void loadMoreDataFromServer(int page){
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetDetectionListResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetDetectionList(Encode.getBasicAuthTemplate(
                UserManager.getInstanse().getmLogin(),
                UserManager.getInstanse().getmPassword()
        ), new GetDetectionListRequestEnvelope(
                actvManuf.getText().toString(),
                spnContractor.getSelectedItem().toString(),
                edtCarId.getText().toString(),
                edtVin.getText().toString(),
                page
        )).enqueue(call);

    }
}
