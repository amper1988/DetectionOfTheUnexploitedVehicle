package com.belspec.detectionoftheunexploitedvehicle.utils;


import com.belspec.detectionoftheunexploitedvehicle.interfaces.MyCallback;
import com.belspec.detectionoftheunexploitedvehicle.interfaces.NetworkDataUpdate;
import com.belspec.detectionoftheunexploitedvehicle.interfaces.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Contractor;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Manufacture;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Model;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Parking;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.PoliceDepartment;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.takeDefaultData.request.GetDefaultDataRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.takeDefaultData.response.GetDefaultDataResponseEnvelope;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;

public class NetworkDataManager implements ResponseListener{
    private List<Contractor> contractorList = new ArrayList<>();
    private List<PoliceDepartment> policeDepartmentList = new ArrayList<>();
    private List<Manufacture> manufactureList = new ArrayList<>();
    private List<Model> modelList = new ArrayList<>();
    private List<Parking> parkingList = new ArrayList<>();
    private NetworkDataUpdate listener;

    public NetworkDataManager(NetworkDataUpdate ndu){
        listener = ndu;
    }

    public void getDefaultData(){
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetDefaultDataResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetDefaultData(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetDefaultDataRequestEnvelope()
        ).enqueue(call);
    }

    public ArrayList<String> getManufactureListAsString(){
        if(this.manufactureList!= null){
            ArrayList<String> stringList = new ArrayList<>();
            for ( Manufacture manufacture : this.manufactureList) {
                stringList.add(manufacture.getName());
            }
            return stringList;
        }else
            return null;
    }

    public ArrayList<String> getModelListAsString(){
        if(this.modelList!= null){
            ArrayList<String> stringList = new ArrayList<>();
            for ( Model model : this.modelList) {
                stringList.add(model.getName());
            }
            return stringList;
        }else
            return null;
    }

    public ArrayList<String> getContractorListAsString(){
        if(this.contractorList != null){
            ArrayList<String> stringList = new ArrayList<>();
            for ( Contractor contractor : this.contractorList) {
                stringList.add(contractor.getName());
            }
            return stringList;
        }else
            return null;
    }

    public ArrayList<String> getPoliceDepartmentListAsString(){
        if(this.policeDepartmentList != null){
            ArrayList<String> stringList = new ArrayList<>();
            for ( PoliceDepartment polDep : this.policeDepartmentList) {
                stringList.add(polDep.getName());
            }
            return stringList;
        }else
            return null;
    }

    public ArrayList<String> getParkingListAsString(){
        if(this.parkingList != null){
            ArrayList<String> stringList = new ArrayList<>();
            for ( Parking parking : this.parkingList) {
                stringList.add(parking.getName());
            }
            return stringList;
        }else
            return null;
    }

    @Override
    public void AuthorizationOK(Response response) {
        GetDefaultDataResponseEnvelope responseEnvelope = (GetDefaultDataResponseEnvelope)response.body();
        this.manufactureList = responseEnvelope.body().getManufactureList();
        this.modelList = responseEnvelope.body().getModelList();
        this.contractorList = responseEnvelope.body().getContractorList();
        this.policeDepartmentList = responseEnvelope.body().getPoliceDepartmentList();
        this.parkingList = responseEnvelope.body().getParkingList();
        if (listener!= null) {
            listener.onNetworkDataUpdate(this);
        }
    }

    @Override
    public void AuthorizationBad(Response response) {
        if(listener!=null)
            listener.onNetworkDataUpdate(null);
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        if (listener !=null)
            listener.onNetworkDataUpdate(null);
    }
}
