package com.belspec.detectionoftheunexploitedvehicle.ui;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.AnimationDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.Toast;

import com.belspec.detectionoftheunexploitedvehicle.R;
import com.belspec.detectionoftheunexploitedvehicle.adapters.ImageListAdapter;
import com.belspec.detectionoftheunexploitedvehicle.gps.GPSTracker;
import com.belspec.detectionoftheunexploitedvehicle.interfaces.MyCallback;
import com.belspec.detectionoftheunexploitedvehicle.interfaces.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Image;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.createDetection.request.CreateDetectionRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.ImageList;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.createDetection.response.CreateDetectionResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Contractor;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Manufacture;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Model;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.PoliceDepartment;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.takeDefaultData.request.GetDefaultDataRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.takeDefaultData.response.GetDefaultDataResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.utils.Converter;
import com.belspec.detectionoftheunexploitedvehicle.utils.Encode;
import com.belspec.detectionoftheunexploitedvehicle.utils.FileManager;
import com.belspec.detectionoftheunexploitedvehicle.utils.UserManager;
import com.belspec.detectionoftheunexploitedvehicle.utils.Utils;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;


public class DetectionFragment extends Fragment implements View.OnClickListener, ResponseListener{
    AutoCompleteTextView actvManufacture;
    AutoCompleteTextView actvModel;
    ScrollView svMain;
    Spinner spnContractor;
    Spinner spnPoliceDepartment;
    EditText edtVIN;
    EditText edtCarID;
    EditText edtColor;
    EditText edtStreet;
    Switch swTypeVehicle;
    Button btnRegistrate;
    RecyclerView rvImageList;
    Button btnAddImage;
    View mView;
    ImageListAdapter imageListAdapter;
    ImageView imvLoading;
    ArrayList<String> stringArrayManufactureList;
    ArrayList<String> stringArrayModelList;
    ArrayList<String> stringArrayContractorList;
    ArrayList<String> stringArrayPoliceDepartments;
    String adress;
    final int REQUEST_CODE_PHOTO = 1;
    final String TAG = "myLogs";

    @Override
    public View onCreateView(LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.detection_fragment, container, false);
        initViews();
        initComponents(savedInstanceState);
        Log.d("DetectionFragment", "CreateView");
        return  mView;
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Log.d("DetectionFragment", "ViewCreated");
    }

    @Override
    public void onStop() {
        super.onStop();
        Log.d("DetectionFragment", "OnStop");
    }

    @Override
    public void onPause() {
        super.onPause();
        Log.d("DetectionFragment", "OnPause");
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        imageListAdapter.clear();
        Log.d("DetectionFragment", "OnDestroyView");
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putStringArrayList("contractorList", stringArrayContractorList);
        outState.putStringArrayList("policeDepartmentList", stringArrayPoliceDepartments);
        outState.putStringArrayList("manufactureList", stringArrayManufactureList);
        outState.putStringArrayList("modelList", stringArrayModelList);
        outState.putString("adress", adress);
        outState.putInt("itemPolPosition", spnPoliceDepartment.getSelectedItemPosition());
        outState.putInt("itemContractorPosition",  spnContractor.getSelectedItemPosition());
        outState.putParcelable("imageListAdapter", imageListAdapter);
    }

    private void initViews(){
        actvManufacture = (AutoCompleteTextView) mView.findViewById(R.id.actvManufacture);
        actvModel = (AutoCompleteTextView) mView.findViewById(R.id.actvModel);
        spnContractor = (Spinner) mView.findViewById(R.id.spnContractor);
        spnPoliceDepartment = (Spinner) mView.findViewById(R.id.spnPoliceDepartment);
        btnRegistrate = (Button)mView.findViewById(R.id.btnRegister);
        edtCarID = (EditText)mView.findViewById(R.id.edtCarID);
        edtVIN = (EditText)mView.findViewById(R.id.edtVIN);
        edtStreet = (EditText)mView.findViewById(R.id.edtStreet);
        swTypeVehicle = (Switch)mView.findViewById(R.id.swType);
        edtColor = (EditText)mView.findViewById(R.id.edtColor);
        rvImageList = (RecyclerView)mView.findViewById(R.id.rvImageList);
        btnAddImage = (Button)mView.findViewById(R.id.btnAddImage);
        svMain = (ScrollView)mView.findViewById(R.id.svDetection);
        imvLoading = (ImageView)mView.findViewById(R.id.imvLoading);
        imvLoading.setBackgroundResource(R.drawable.pb_loading);
    }

    private void initComponents(Bundle savedInstanceState) {

        if (savedInstanceState == null){
            setLoading(true);
            imageListAdapter = new ImageListAdapter();
            actvModel.setText("");
            actvManufacture.setText("");
            edtColor.setText("");
            edtVIN.setText("");
            edtCarID.setText("");
            edtStreet.setText(Utils.getAdress(getContext()));
            RetrofitService retrofitService = Api.createRetrofitService();
            MyCallback<GetDefaultDataResponseEnvelope> call = new MyCallback<>();
            call.addResponseListener(this);
            retrofitService.executeGetDefaultData(
                    Encode.getBasicAuthTemplate(
                            UserManager.getInstanse().getmLogin(),
                            UserManager.getInstanse().getmPassword()
                    ),
                    new GetDefaultDataRequestEnvelope()
            ).enqueue(call);
        } else{
            stringArrayManufactureList = savedInstanceState.getStringArrayList("manufactureList");
            stringArrayModelList = savedInstanceState.getStringArrayList("modelList");
            stringArrayContractorList = savedInstanceState.getStringArrayList("contractorList");
            stringArrayPoliceDepartments = savedInstanceState.getStringArrayList("policeDepartmentList");
            imageListAdapter = savedInstanceState.getParcelable("imageListAdapter");
            edtStreet.setText(savedInstanceState.getString("adress"));
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayManufactureList );
            actvManufacture.setAdapter(arrayAdapterManufacture);
            ArrayAdapter<String> arrayAdapterModel  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayModelList );
            actvModel.setAdapter(arrayAdapterModel);
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayContractorList );
            spnContractor.setAdapter(arrayAdapterContractor);
            spnContractor.setSelection(savedInstanceState.getInt("itemContractorPosition"));
            ArrayAdapter<String> arrayAdapterPoliceDepartments  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayPoliceDepartments );
            spnPoliceDepartment.setAdapter(arrayAdapterPoliceDepartments);
            spnPoliceDepartment.setSelection(savedInstanceState.getInt("itemPolPosition"));
            setLoading(false);
        }
        rvImageList.setLayoutManager(new GridLayoutManager(getActivity(),3));
        rvImageList.setAdapter(imageListAdapter);
        btnAddImage.setOnClickListener(this);
        btnRegistrate.setOnClickListener(this);
    }



    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case (R.id.btnRegister):
                setLoading(true);
                RetrofitService createDataRetrofit = Api.createRetrofitService();
                MyCallback<CreateDetectionResponseEnvelope> createDataCall = new MyCallback<>();
                createDataCall.addResponseListener(this);

                ImageList imageList =  new ImageList();
                int count = imageListAdapter.getItemCount();
                if (count>0){
                    for (int i = 0; i < count; i++){
                        imageList.addImage(new Image().setData(Converter.encodeToBase64(imageListAdapter.getFilePath(i))));
                    }
                }else{
                    imageList.addImage(new Image().setData(""));
                }

                createDataRetrofit.executeCreateDetection(
                        Encode.getBasicAuthTemplate(
                                UserManager.getInstanse().getmLogin(),
                                UserManager.getInstanse().getmPassword()
                        ),
                        new CreateDetectionRequestEnvelope(
                                actvManufacture.getText().toString(),
                                actvModel.getText().toString(),
                                spnContractor.getSelectedItem().toString(),
                                spnPoliceDepartment.getSelectedItem().toString(),
                                ((swTypeVehicle.isChecked())?"2":"1"),
                                 edtCarID.getText().toString(),
                                edtStreet.getText().toString(),
                                edtVIN.getText().toString(),
                                edtColor.getText().toString(),
                                imageList
                        )
                ).enqueue(createDataCall);

                break;
            case (R.id.btnAddImage):
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (intent.resolveActivity(getActivity().getPackageManager()) != null) {
                    File photoFile = null;
                    try {
                        photoFile = FileManager.createImageFile(getActivity());
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }

                    if (photoFile != null) {
                       imageListAdapter.addFilePath(photoFile.getAbsolutePath());
                        Uri photoURI = Uri.fromFile(photoFile);
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                        startActivityForResult(intent, REQUEST_CODE_PHOTO);
                    }
                }

                break;
        }

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                GPSTracker gps = new GPSTracker(getActivity());
                Converter.compressImage(imageListAdapter.getCurrentPath(), Bitmap.CompressFormat.JPEG,80, 1024);
                if (gps.setGpsToFile(imageListAdapter.getCurrentPath())) {
                    BitmapFactory.Options opt = new BitmapFactory.Options();
                    opt.inSampleSize = 8;
                    Bitmap bitmap = BitmapFactory.decodeFile(imageListAdapter.getCurrentPath(), opt);
                    imageListAdapter.add(bitmap);
                }else{
                    imageListAdapter.deleteCurrentPath();
                }
            }else if (resultCode == Activity.RESULT_CANCELED) {
                imageListAdapter.deleteCurrentPath();
                Log.d(TAG, "Canceled");
            }
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if (response.body().getClass() == GetDefaultDataResponseEnvelope.class){
            setLoading(false);
            GetDefaultDataResponseEnvelope responseEnvelope = (GetDefaultDataResponseEnvelope)response.body();
            List<Manufacture> manufactures = responseEnvelope.body().getManufactureList();
            if (manufactures != null) {
                stringArrayManufactureList = new ArrayList<>();
                for ( Manufacture manufacture : manufactures) {
                    stringArrayManufactureList.add(manufacture.getName());
                }
                ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayManufactureList );
                actvManufacture.setAdapter(arrayAdapterManufacture);
            }

            List<Model> models = responseEnvelope.body().getModelList();
            if (models!=null){
                stringArrayModelList = new ArrayList<>();
                for ( Model model : models) {
                    stringArrayModelList.add(model.getName());
                }
                ArrayAdapter<String> arrayAdapterModel  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayModelList );
                actvModel.setAdapter(arrayAdapterModel);
            }

            List<Contractor> contractors = responseEnvelope.body().getContractorList();
            if(contractors!=null){
                stringArrayContractorList = new ArrayList<>();
                for ( Contractor contractor : contractors) {
                    stringArrayContractorList.add(contractor.getName());
                }
                ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayContractorList );
                spnContractor.setAdapter(arrayAdapterContractor);
            }


            List<PoliceDepartment> policeDepartments = responseEnvelope.body().getPoliceDepartmentList();
            if (policeDepartments != null){
                stringArrayPoliceDepartments = new ArrayList<>();
                for ( PoliceDepartment policeDepartment : policeDepartments) {
                    stringArrayPoliceDepartments.add(policeDepartment.getName());
                }
                ArrayAdapter<String> arrayAdapterPoliceDepartments  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, stringArrayPoliceDepartments );
                spnPoliceDepartment.setAdapter(arrayAdapterPoliceDepartments);
            }
            edtStreet.setText(Utils.getAdress(getContext()));
            Log.d("ERROR", response.message());
        }else if(response.body().getClass() == CreateDetectionResponseEnvelope.class){
            CreateDetectionResponseEnvelope responseEnvelope = (CreateDetectionResponseEnvelope) response.body();
            setLoading(false);
            Utils.showMessage(getContext(), "Зарегистрирован под номером: " + responseEnvelope.getDocId());
            Log.d("ERROR", responseEnvelope.getDocId());
            clear();
        }

    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this.getActivity(), "Wrong authorization. Response code: " + response.code()+ " " + response.message(), Toast.LENGTH_SHORT).show();
        setLoading(false);
        Log.d("ERROR", response.message());
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this.getActivity(), "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        setLoading(false);
        Log.d("ERROR", t.getLocalizedMessage() + t.getMessage());
    }

    private void clear(){
        imageListAdapter.clear();
        initComponents(null);
    }

    private void setLoading(Boolean bool) {
        AnimationDrawable animation = (AnimationDrawable) imvLoading.getBackground();
        if(bool){
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
            svMain.setVisibility(View.GONE);
        }else{
            imvLoading.setVisibility(View.GONE);
            animation.stop();
            svMain.setVisibility(View.VISIBLE);

        }
    }
}
