package com.belspec.detectionoftheunexploitedvehicle.ui;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.AnimationDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.annotation.Nullable;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;

import com.belspec.detectionoftheunexploitedvehicle.R;
import com.belspec.detectionoftheunexploitedvehicle.adapters.ImageListAdapter;
import com.belspec.detectionoftheunexploitedvehicle.gps.GPSTracker;
import com.belspec.detectionoftheunexploitedvehicle.interfaces.MyCallback;
import com.belspec.detectionoftheunexploitedvehicle.interfaces.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.createEvacuation.request.CreateEvacuationRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.createEvacuation.response.CreateEvacuationResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.DetectionDoc;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.getItemImage.request.GetItemImageRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.getItemImage.response.GetItemImageResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.getParkingList.request.GetParkingListRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.getParkingList.response.GetParkingListResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Image;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.ImageList;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.model.Parking;
import com.belspec.detectionoftheunexploitedvehicle.retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.utils.Converter;
import com.belspec.detectionoftheunexploitedvehicle.utils.Encode;
import com.belspec.detectionoftheunexploitedvehicle.utils.FileManager;
import com.belspec.detectionoftheunexploitedvehicle.utils.UserManager;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;


public class EvacuationActivity extends AppCompatActivity implements View.OnClickListener, ResponseListener{
    Button btnAddImage;
    Button btnCreateEvacuation;
    TextView txvEvacuationManufacture;
    TextView txvEvacuationModel;
    TextView txvEvacuationDocId;
    TextView txvEvacuationCarId;
    TextView txvEvacuationDateDetection;
    TextView txvEvacuationContractor;
    ImageView imvAvatar;
    RadioButton rbNoCarId;
    RadioButton rbNoAction;
    RadioButton rbNoOwner;
    ImageListAdapter imageListAdapter;
    RecyclerView rvImageFromBase;
    LinearLayoutManager llm;
    DetectionDoc detectionDoc;
    Spinner spnParking;
    ArrayList<String> stringArrayParkingList;
    int curItem;
    ScrollView svAll;
    ImageView imvLoading;
    final int REQUEST_CODE_PHOTO = 1;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.evacuation_activity);
        initViews();
        initComponents(savedInstanceState);
    }

    private void initViews(){
        btnAddImage = (Button)findViewById(R.id.btnEvacuationAddImage);
        btnCreateEvacuation = (Button)findViewById(R.id.btnCreateEvacuation);
        txvEvacuationManufacture = (TextView)findViewById(R.id.txvEvacuationManufacture);
        txvEvacuationModel = (TextView)findViewById(R.id.txvEvacuationModel);
        txvEvacuationDocId = (TextView)findViewById(R.id.txvEvacuationDocID);
        txvEvacuationCarId = (TextView)findViewById(R.id.txvEvacuationCarID);
        txvEvacuationDateDetection = (TextView)findViewById(R.id.txvEvacuationDateDetection);
        txvEvacuationContractor = (TextView)findViewById(R.id.txvEvacuationContractor);
        rbNoAction = (RadioButton)findViewById(R.id.rbNoAction);
        rbNoCarId = (RadioButton)findViewById(R.id.rbNoCarId);
        rbNoOwner = (RadioButton)findViewById(R.id.rbNoOwner);
        imvAvatar = (ImageView)findViewById(R.id.imvAvatar);
        rvImageFromBase = (RecyclerView)findViewById(R.id.rvEvacuationImageList);
        spnParking = (Spinner)findViewById(R.id.spnParking);
        svAll = (ScrollView)findViewById(R.id.svAll);
        imvLoading = (ImageView) findViewById(R.id.imvLoading);
        imvLoading.setBackgroundResource(R.drawable.pb_loading);
    }

    private void initComponents(Bundle bndl){
        btnAddImage.setOnClickListener(this);
        btnCreateEvacuation.setOnClickListener(this);
        detectionDoc = getIntent().getParcelableExtra(DetectionDoc.class.getCanonicalName());
        txvEvacuationManufacture.setText(detectionDoc.getManufacture());
        txvEvacuationModel.setText(detectionDoc.getModel());
        txvEvacuationDocId.setText(detectionDoc.getId());
        txvEvacuationCarId.setText(detectionDoc.getCarId());
        SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
        txvEvacuationDateDetection.setText(df.format(detectionDoc.getDateDetection()));
        txvEvacuationContractor.setText(detectionDoc.getContractor());
        imvAvatar.setImageBitmap(Converter.getBitmapFromBase64Stirng(this, detectionDoc.getImage()));
        llm = new LinearLayoutManager(this);
        llm.setOrientation(LinearLayoutManager.HORIZONTAL);
        if (bndl == null){
            setLoading(true);
            imageListAdapter = new ImageListAdapter();
            rbNoAction.setChecked(true);
            rvImageFromBase.setAdapter(imageListAdapter);
            rvImageFromBase.setLayoutManager(llm);
            curItem = 1;
            getImageFromApi(detectionDoc.getId(), curItem);
            getParkingListFromApi();
        }else{
            rvImageFromBase.setAdapter((ImageListAdapter)bndl.getParcelable("imageListAdapter"));
            rvImageFromBase.setLayoutManager(llm);
            stringArrayParkingList = bndl.getStringArrayList("parkingList");
            ArrayAdapter<String> arrayAdapterParking  = new ArrayAdapter<>(this, R.layout.spinner_item, stringArrayParkingList );
            spnParking.setAdapter(arrayAdapterParking);
            spnParking.setSelection(bndl.getInt("itemParkingPosition"));
            setLoading(false);
        }


    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putStringArrayList("parkingList", stringArrayParkingList);
        outState.putInt("itemParkingPosition", spnParking.getSelectedItemPosition());
        outState.putParcelable("imageListAdapter", imageListAdapter);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.btnEvacuationAddImage:
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (intent.resolveActivity(getPackageManager()) != null) {
                    File photoFile = null;
                    try {
                        photoFile = FileManager.createImageFile(this);
                    } catch (IOException ex) {

                    }
                    if (photoFile != null) {
                        imageListAdapter.addFilePath(photoFile.getAbsolutePath());
                        Uri photoURI = Uri.fromFile(photoFile);
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                        startActivityForResult(intent, REQUEST_CODE_PHOTO);
                    }
                }
                break;
            case R.id.btnCreateEvacuation:
                setLoading(true);
                createEvacuation();
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                GPSTracker gps = new GPSTracker(this);
                Converter.compressImage(imageListAdapter.getCurrentPath(), Bitmap.CompressFormat.JPEG, 80, 1024);
                if (gps.setGpsToFile(imageListAdapter.getCurrentPath())) {
                    BitmapFactory.Options opt = new BitmapFactory.Options();
                    opt.inSampleSize = 8;
                    Bitmap bitmap = BitmapFactory.decodeFile(imageListAdapter.getCurrentPath(), opt);
                    imageListAdapter.add(bitmap);
                }else{
                    imageListAdapter.deleteCurrentPath();
                }
            }else if (resultCode == Activity.RESULT_CANCELED) {
                imageListAdapter.deleteCurrentPath();
            }
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if(response.body().getClass() == GetItemImageResponseEnvelope.class){
            GetItemImageResponseEnvelope responseEnvelope = (GetItemImageResponseEnvelope) response.body();
            if (responseEnvelope != null) {
                rvImageFromBase.setAdapter(imageListAdapter);
                imageListAdapter.add(Converter.getBitmapFromBase64Stirng(this, responseEnvelope.getImage()));
                curItem++;
                getImageFromApi(detectionDoc.getId(), curItem);
            } else {
                setLoading(false);
            }
        }
        if (response.body().getClass() == GetParkingListResponseEnvelope.class){
            GetParkingListResponseEnvelope responseEnvelope = (GetParkingListResponseEnvelope) response.body();
            if (responseEnvelope != null){
                List<Parking> parkingList= responseEnvelope.getBody().getParkingList();
                stringArrayParkingList = new ArrayList<>();
                for ( Parking parking : parkingList) {
                    stringArrayParkingList.add(parking.getName());
                }
                ArrayAdapter<String> arrayAdapterParking  = new ArrayAdapter<>(this, R.layout.spinner_item, stringArrayParkingList );
                spnParking.setAdapter(arrayAdapterParking);

            }
            setLoading(false);
        }
        if (response.body().getClass() == CreateEvacuationResponseEnvelope.class){
            CreateEvacuationResponseEnvelope responseEnvelope = (CreateEvacuationResponseEnvelope) response.body();
            if (responseEnvelope != null) {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Важное сообщение!")
                        .setMessage(responseEnvelope.getData())
                        .setCancelable(false)
                        .setNegativeButton("OK",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {

                                        dialog.cancel();
                                        finish();

                                    }
                                });
                AlertDialog alert = builder.create();
                alert.show();
            } else {
                setLoading(false);
            }
        }
    }

    @Override
    public void AuthorizationBad(Response response) {
        Log.d("ERROR", response.message());
        setLoading(false);
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        setLoading(false);
        Log.d("ERROR", t.getLocalizedMessage());

    }

    private void getImageFromApi(String docId, int index){
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetItemImageResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetItemImage(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetItemImageRequestEnvelope(docId, index)
        ).enqueue(call);
    }

    private void getParkingListFromApi(){
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetParkingListResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetParkingList(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetParkingListRequestEnvelope()
        ).enqueue(call);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        imageListAdapter.clear();
    }

    private void createEvacuation(){
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<CreateEvacuationResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        ImageList imageList =  new ImageList();
        int count = imageListAdapter.getFilePathCount();
        if (count>0){
            for (int i = 0; i < count; i++){
                imageList.addImage(new Image().setData(Converter.encodeToBase64(imageListAdapter.getFilePath(i))));
            }
        }else{
            imageList.addImage(new Image().setData(""));
        }
        int order = 1;
        if(rbNoAction.isChecked()){
            order = 3;
        }else if (rbNoOwner.isChecked()){
            order = 2;
        }else if(rbNoCarId.isChecked()){
            order = 1;
        }
        retrofitService.executeCreateEvacuation(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new CreateEvacuationRequestEnvelope(
                        detectionDoc.getId(),
                        order,
                        UserManager.getInstanse().getmLogin(),
                        spnParking.getSelectedItem().toString(),
                        imageList)
        ).enqueue(call);
    }

    private void setLoading(Boolean bool) {
        AnimationDrawable animation = (AnimationDrawable)imvLoading.getBackground();
        if (bool) {
            svAll.setVisibility(View.GONE);
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
        } else {
            svAll.setVisibility(View.VISIBLE);
            imvLoading.setVisibility(View.GONE);
            animation.stop();
        }
    }
}
