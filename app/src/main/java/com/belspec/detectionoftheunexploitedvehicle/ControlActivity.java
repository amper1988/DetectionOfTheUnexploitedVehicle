package com.belspec.detectionoftheunexploitedvehicle;


import android.app.FragmentTransaction;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.belspec.detectionoftheunexploitedvehicle.Interface.DetectionRegisterListener;
import com.belspec.detectionoftheunexploitedvehicle.Interface.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Image;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Request.CreateDetectionRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Request.ImageList;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Response.CreateDetectionResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Contractor;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Manufacture;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Model;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.PoliceDepartment;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Request.GetDefaultDataRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Response.GetDefaultDataResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.Utils.Encode;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;

public class ControlActivity extends AppCompatActivity implements View.OnClickListener, ResponseListener, DetectionRegisterListener{
    TextView txvName;
    Button btnLogout;
    Button btnDetection;
    FragmentTransaction fTrans;
    DetectionFragment detectionFragment;
    LoadingFragment loadingFragment;

    @Override
    protected void onPostResume() {
        super.onPostResume();
        if (!UserManager.getInstanse().ismRegistered()){
            logout();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.control_activity);
        if (UserManager.getInstanse().ismRegistered()){
            initViews();
            initComponent();
        }else{
            logout();
        }


    }

    private void initViews(){
        txvName = (TextView)findViewById(R.id.txvUsername);
        btnLogout = (Button)findViewById(R.id.btnLogout);
        btnDetection = (Button) findViewById(R.id.btnDetection);

    }

    private void initComponent(){
        btnLogout.setOnClickListener(this);
        btnDetection.setOnClickListener(this);
        txvName.setText(UserManager.getInstanse().getmLogin());
        detectionFragment = new DetectionFragment();
        detectionFragment.setDetectionRegisterListener(this);
    }

    private void logout(){
        UserManager.getInstanse().logout();
        Intent intent = new Intent(this, MainActivity.class);
        startActivity(intent);
        closeActivity();

    }

    private void closeActivity(){
        this.finish();
    }

    @Override
    public void onClick(View view) {
        fTrans = getFragmentManager().beginTransaction();
        switch (view.getId()){
            case R.id.btnDetection:
                fTrans.replace(R.id.frgmCont, detectionFragment);
                fTrans.commit();

                RetrofitService retrofitService = Api.createRetrofitService();
                MyCallback<GetDefaultDataResponseEnvelope> call = new MyCallback<>();
                call.addResponseListener(this);
                retrofitService.executeGetDefaultData(
                        Encode.getBasicAuthTemplate(
                                UserManager.getInstanse().getmLogin(),
                                UserManager.getInstanse().getmPassword()
                        ),
                        new GetDefaultDataRequestEnvelope()
                ).enqueue(call);

                break;
            case R.id.btnLogout:
                logout();
                break;
            case R.id.btnRegister:

                break;
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if (response.body().getClass() == GetDefaultDataResponseEnvelope.class){
            GetDefaultDataResponseEnvelope responseEnvelope = (GetDefaultDataResponseEnvelope)response.body();
            List<Manufacture> manufactures = responseEnvelope.body().getManufactureList();
            ArrayList<String> stringArrayManufactureList = new ArrayList<>();
            for ( Manufacture manufacture : manufactures) {
                stringArrayManufactureList.add(manufacture.getName());
            }
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayManufactureList );
            // присваиваем адаптер списку
            //actvCarModel.setAdapter(arrayAdapter);
            detectionFragment.actvManufacture.setAdapter(arrayAdapterManufacture);

            List<Model> models = responseEnvelope.body().getModelList();
            ArrayList<String> stringArrayModelList = new ArrayList<>();
            for ( Model model : models) {
                stringArrayModelList.add(model.getName());
            }
             ArrayAdapter<String> arrayAdapterModel  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayModelList );
            detectionFragment.actvModel.setAdapter(arrayAdapterModel);

            List<Contractor> contractors = responseEnvelope.body().getContractorList();
            ArrayList<String> stringArrayContractorList = new ArrayList<>();
            for ( Contractor contractor : contractors) {
                stringArrayContractorList.add(contractor.getName());
            }
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayContractorList );
            detectionFragment.spnContractor.setAdapter(arrayAdapterContractor);

            List<PoliceDepartment> policeDepartments = responseEnvelope.body().getPoliceDepartmentList();
            ArrayList<String> stringArrayPoliceDepartments = new ArrayList<>();
            for ( PoliceDepartment policeDepartment : policeDepartments) {
                stringArrayPoliceDepartments.add(policeDepartment.getName());
            }
            ArrayAdapter<String> arrayAdapterPoliceDepartments  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayPoliceDepartments );
            detectionFragment.spnPoliceDepartment.setAdapter(arrayAdapterPoliceDepartments);
            Log.d("ERROR", response.message());
        }else if(response.body().getClass() == CreateDetectionResponseEnvelope.class){
            CreateDetectionResponseEnvelope responseEnvelope = (CreateDetectionResponseEnvelope) response.body();
            fTrans = getFragmentManager().beginTransaction();
            fTrans.remove(loadingFragment);
            fTrans.commit();
            Toast.makeText(this, "Registered by ID: " + responseEnvelope.getDocId(), Toast.LENGTH_LONG).show();
            Log.d("ERROR", responseEnvelope.getDocId());
        }

    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this, "Wrong authorization. Response code: " + response.code()+ " " + response.message(), Toast.LENGTH_SHORT).show();
        Log.d("ERROR", response.message());
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this, "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        Log.d("ERROR", t.getLocalizedMessage() + t.getMessage());
    }

    @Override
    public void registration() {
        fTrans = getFragmentManager().beginTransaction();
        loadingFragment = new LoadingFragment();
        fTrans.replace(R.id.frgmCont, loadingFragment);
        fTrans.commit();
        RetrofitService createDataRetrofit = Api.createRetrofitService();
        MyCallback<CreateDetectionResponseEnvelope> createDataCall = new MyCallback<>();
        createDataCall.addResponseListener(this);

        ImageList imageList =  new ImageList().addImage(new Image().setData(
                "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBwgHBgkIBwgKCgkLDRYPDQwMDRsU\n" +
                        "FRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys/RD84QzQ5OjcBCgoKDQwN\n" +
                        "Gg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3\n" +
                        "Nzc3Nzc3Nzc3N//AABEIAH8AqgMBIgACEQEDEQH/xAAbAAACAwEBAQAAAAAAAAAA\n" +
                        "AAAEBQIDBgABB//EADsQAAEDAwIDBgQDBgYDAAAAAAECAwQABRESIRMxQQYUIlFh\n" +
                        "cSMygZEVQqFikrHB0eEHFlJTcvAkMzT/xAAZAQACAwEAAAAAAAAAAAAAAAAABAED\n" +
                        "BQL/xAAjEQACAwABAwUBAQAAAAAAAAAAAQIDESEEEjETFCJBUTMy/9oADAMBAAIR\n" +
                        "AxEAPwDJW4Q9TgmtuKGBo0JJxvVbLyGJLhSklG4SDsQM7VKC5HgqUplyQdWAdR/v\n" +
                        "RMWKVPrcdcaCFgqGs+vtWbdcrMwB9a0MSbb3mPFWZKMA+L5uhNWyC68zHAZIdaJP\n" +
                        "Dz82T/elMC4qt1wS1BOQpXxdR8Of2fStbe5wLDz6XWGZJbAGgp1pJGNk8/rVBbTZ\n" +
                        "6ctPZlmiWy3tXkvFT+sIcW34ShPkM9RvQ3ZMWuTIZZfkFxxtvQl9R+IcnPOhpdzJ\n" +
                        "7OfhMaIy6IyS2px9SlKWcbq589+tZ+wW6Y7tFbWl4uBPhyFJGPmJ6CpNGDco6/s3\n" +
                        "/bGBbGo34c647HaLiHG+ErHygDf7CsqxZJM3vy7fh5MY/IrwrWOew9qPkTGIbbbF\n" +
                        "zdVeJjG6A4fhpPmondXLlU7bd3YQeu0dtkBQKVNLSVHPmDz+nLFQTylgFbLrDjOI\n" +
                        "TqiJwkoUVRVFZHUEaudV3OfZGkuy4cdClpcCENKGlJOMnb70HGmMXWOh2Tbpfe0h\n" +
                        "ZdmxgUoVq6HITy6Yz9aVItzja2n9SnYrilFt1eTrxsefvj6VLWeSmy9QeYWv9rnk\n" +
                        "B2DHhRm2pBQpRA3Cgdj9K9jXG4vIKzIGEndOnnUxHDgkOJi5EdnjKUGwdgcbetFW\n" +
                        "SA5e47irZBLCkK0LSQslZwDr+XA58s9Kvrp9RcHVdqmm8NTablBn2aNplJTIRt3f\n" +
                        "GVZPL6bc6PjOoZdfUpvU4yvQkg7A4zmkfZrsSYk1T9zl8PSMIMPdRBzndQGOnQ1s\n" +
                        "Pw+1jVqbfdCjk6l6c+pwd679o/0q90vwzV4fvT85iRIgPKhIxqdOkIBHVIznfrUp\n" +
                        "fbBsBxgS+7pGAyRuV8s4/WtSibbnWlW9EBSUaSgkrz6Z96+W9puy8a1XTvTq5MiI\n" +
                        "slSVJAPDGOo5DfyqfaP9O6rlY8w0Ninuq7QKucXhrfksJjHSNjhWQaDTfL/Zpzkc\n" +
                        "MNvQkMuaWnBsk6gdX60Oy2q1tMIthcW4pvjx1tDOc7nGcAkdQN6br7QMXFgNS46o\n" +
                        "s1kBakOowX09cY5nblS0k4tr8LsTELdydduRmTn31Ic3eQyrTxD060quLEF+Wt23\n" +
                        "JejxtvhuNkkE+vX+VbS7tW2RclPwkmOXEILiX29AVtySMbZ6kUnl202ztI5hx2Qh\n" +
                        "x3LaAoqTpPQZ2Hr71yczj3xwz86zsQIYkZCJKlgaM51IIzqB8if4UOiUEoCcDYY+\n" +
                        "RP8AStPfAJqkzH2iw43hlLC0gaU+w22x+tKtDX+lv9KNM22DrlgoaZcdzwxnHPer\n" +
                        "lxpS06VklI5AqFUtPLaJKFYzzo+S6tEZtSDhRCV59FZwPuk/etbsj+HBUmUxb0JW\n" +
                        "plK3WtikIJ3pla7kq5PrclxGi29gIWsDUnH6jlQdkgqlT0vvOqcbJwUISCQo7AH6\n" +
                        "07kE2S7wVutR2ihw8RKt28Y60lfZBrtiuRhdNNrS64ANW0OtEJcU6SpaDz5U27I3\n" +
                        "piLBnMymnJLrxHDQndStuWOdCXWcm6pQ64wywyU6g0zyR7+tANOxWUnhLCDz1A+L\n" +
                        "6HmKVLq6JxfyfA0uc23OSNV3Zl96PzMJZSOH+9jn6UzRKtlstiHravX3xJS20tON\n" +
                        "/MjpWTkIVPWh5grfWtsuFalHxJ88nnTLspYZN6uTLqm3Q0wjSFkEDGa6jHulh3O+\n" +
                        "EHjBJNmuclapi0TXm0u7spSooTv0A5gU7mWq9XqLEZbhx41sh5Wl6Q2pC9zgpxzx\n" +
                        "nfl9etblxKrYwpEZxWUqxknNASZUiTp4zyyE8gDgfUDnWhVV2xyQndYpy1FVphW+\n" +
                        "0x0hAQ+84nQ5hjQEjOdh7+ZJq6Y8NOmMShsjJSgad6uiwm3Y5kOSAkAnKPQVRKDW\n" +
                        "sCPjBTuBVySXgrTaEQfkHGlbh9snFdx5A5rcHqrNPbmh2zdm35togNyJqEgqZcVs\n" +
                        "r339TWIh9rrpcg41LtaZjoTqjtRE8PC/2iTyqSBulxSVFaVEKPUGoylGVGdjSfis\n" +
                        "uJKVIXuDXcKS02132MY8hbYWprOdJI3GfSvB5daCU2vAktMJ7s681mSXLWw4HVh1\n" +
                        "Q0hOckYPICmvaGfZu0UYxYNzc1toVIQWkJ8JTtpBPIHPTyq5TEeUlUeWjXHcGlxO\n" +
                        "SMp61l/8kzYdxW9YVxpAWkhMfUUlAP8ALYUvel2D1Vqli+wVi3XTvUZ+5OB1pace\n" +
                        "J8LIA9M1sEORIdwVZ++tyUraUh11agS2Vckk9D6Uhj2aZEbK58tpqU4TxQg6k6h5\n" +
                        "UvsUqzyb3Hj3FzC3NQCo48Gvoonmo+9Z6WjLGU3tPb48vuUmwNSFIVwVS31LUrI2\n" +
                        "5YzzFDusRFuLUhTiUlRISONgD7UGtdyTcHkLYRIYbWvhuoTlYCVY1q/n716Z11z4\n" +
                        "L1F09PgI5fapI9CifM90VmLCwVOyi0kcyE6x+nKulvR5sdJtpUG2ChtwLPiXgK5e\n" +
                        "pztTP/L7XBeRxXOCQOKrAykegp5Aslj/AAwxo0vhuNo4vGfABWRsPrvV9crJ+GJQ\n" +
                        "gq/6IC7K27vLC1xUKjvNrC+FI2K1jcYG21Ke1zl3VOjpu8RLL8lRUhpk6sAdcjnW\n" +
                        "2tEoQIUdM65R3k8MBpLaPGseZNZvtNNS7eTOQOIiO2EtJWdIGee/1qh+eR5ZnAND\n" +
                        "enqijjRnFIQMEJbOSBUrLHZnXZmJIWA08dtCtTif2Sjn9a13Zm0XGdHKZyWWG1J1\n" +
                        "hTTuvb3pqWo/Z9aPw5hovOp+K+oZUoeXpTFNL1NrgXuuSTSfI7u1usUeNFalRW1I\n" +
                        "bwG8DcAdDQT0p1xfw3FIQBhKUbJA6UhefefxxnCvHLPSnkFpD5Sgqx4MjBFOKuCe\n" +
                        "pCDeljjry2dLgOnbxEVWmK6AJEh9tmEASpRTuAKtkOq4ZjlI0oOArzxS+3yVxrq/\n" +
                        "xni9CfIQoaQRGUE5IOehA5+tdkFMLtfaZFwZtcREt0PBWXNASACcBW++PXFE3ZRY\n" +
                        "fbajHVrbzjmeZoC+yLP2Rjm42i1KkSHnSUuYOlOd8f8AEViInaG63a/Klyn1DKSE\n" +
                        "pSnCUjJ2BoA3Ee8uWxt56Shb0MDU+R4ykDySNz1qyda2ZMQK7O3ZqEt1XjeGF5Tj\n" +
                        "kMcjnBpE72nbtNtmqetipZeRoSEb4G+f4j7VnmrE3OhokW7WzqVuyl46U+tAGtnX\n" +
                        "+y2a1JgTrg7cp6FJS4tCcHI+bcDzpLM7ayXoS2rXaAuNt/5K+bW/Ufmzy+tLo3ZJ\n" +
                        "5bx7y4tCDkkp3JNPrbZ2YDC2NSnkL5hY/pQB5FlvP8JWlKkK+YgbetOrc49HkpcZ\n" +
                        "RqJISds10S2JMdKWsMqOdIcGEg+tUye0FlsbyI70wyHNlKLI2B8v0qHFSWMlNp6h\n" +
                        "XNsdzZuEsF5HDdSt6KhwZWtefk9Ac86M7PdgESbazJumqBN1uFTaEg6SVk7Gll0/\n" +
                        "xKmLfcRAtyWWk7NvPZKyPai7N/iWw8JS7gFpDSElGltS9RydsCs21JTaQ/W52VNx\n" +
                        "fgm52Skxwp223B54RysJdS2WzkqyUq/1D9KqZvtyaZQ2/anHHUpCVrTgBShzIGNq\n" +
                        "lM/xEgTozjUfvaDwzhtlgjKvc1hTfLjn/wCaX+8KI0zktSLKk+35+Rv2nlvxboru\n" +
                        "69K17ZI8P1PQVmFKuSnVd93aySnqM01vFyanxFsoQsKUPmVyqHZuM++2uJ3gurSn\n" +
                        "iBtwgJ2wMAnrvTPTQlFvUdSrjPyHx7mmLb2NTK1aUpThAyeeOVaS121y7LcIaWiG\n" +
                        "2kFxx5OjKtjpAPM0kZtWVIRNUGEgjWkq3TjpX0W2zreLY3EYc1Ejwg+dU1wjOxpl\n" +
                        "d8nXD4g8hxmM2mMwzpbCMc6XUVcf/eP+NC0+korEZzevWdREiI8w0JUWYGJDJC2i\n" +
                        "UZ1n/Sd+R5Gh6Mt1vlXBsugBtAOAXF5yfYVJAys91ZvcItJ+BJZID7Dh8SPIjzBq\n" +
                        "b0JLzqobhCkHnkZBA3wfQ4x9aEhRxBmrlzi2VMpLfEBwlKPNRPQbVlk3lu+Xm7rj\n" +
                        "vyG2yUCI6jbTpSQo48jvjzFADGXfodnaej3Nt55lGpDCEpKtaejaj+UdNXlWWs77\n" +
                        "b7DvAaLTSXSEoznAO+P1oKE06mVJblyXZKX9SMr5jO2KeWu0oaaUiKoBKl5OrzwK\n" +
                        "AO5b06tFpS1GDEBgqWPEpQ6ivF2yFb4T8u8y22mG8eMH3zt16UDcO1LYjORrNE4S\n" +
                        "cbSVnDi/fHSgB66GrK13q7zIkQZCQ2t3KlZ8tufp+tI7p2tLjTrdrbKSccJ90A+W\n" +
                        "SU/fr61mHFuP4VJVxHPzEnO/XnXmAkYHLyoAk9IuEh0uyblJdUfmSpfhI8seVR5V\n" +
                        "2aHlSQ1lGlRJTzFAFFz+ZrnVsq5TIU9MVESOyHFeFxcVSeIjod8Ut1E48RyPM0Xd\n" +
                        "rlNucrjS5br6Ej4aXPye1UW1JptLkc6V2RfHhhbNzabkONSvBxfh60jbUTzx0FHD\n" +
                        "si0oAi9QsH9of1pt2N7KW25MoVPkP97J4hQxkAo/aOOW4r6Kx2ctSGW0piMaQkAf\n" +
                        "Gz0peMborEMTujB4z4P3J7lhP71FCxXcBLjUJ5fVJQRkeo3pkba+0Mqe7ws89GAg\n" +
                        "e3WpuXdq2WwOPFTkgvBGlWThOD9OlR7mwuKI8+bEhTWrnES4oNqwV+NaTjmfIij+\n" +
                        "zaYjUWHITPdW4BqwSdzWdbvgcnuukpUh9Kkqa22Chg0TaoMCPMj93m6tKspbCFdQ\n" +
                        "rbOPPFWdOn3NtCfUyTjwb1EjvKeJqUrp4qlQVnebQtaX1YSUnQMfmo3kN+g3pwRK\n" +
                        "3nkMY1k7+Qqt2XKhMiRbltxn1K0qbSjKCnzx50NPebdSgNqzg1Fl5LmUSl5QBsMf\n" +
                        "0oATXifcbg//AOfP4rYSUqYbb0IV/wAh+Y+tStUZ4SELYwjVscKxkYxTBEWEuYdb\n" +
                        "YKVk45/Smz1pYtjCZkh1bDIGQ2k+JXTAzzoADZ7PvygSw2hTh+bhnxp/a/vVlwu9\n" +
                        "us8QMW5oTrg2QHOIspShXUHzNLLp2ndluKiW+K7CiBOOLrGpw9c43xSVKQkqUB4l\n" +
                        "HKj1J9aAJT5Ey7S3JF2cbeB/9TQb8LXngeu32rzA8hUHXkM41qAzyoKNKwtXHc2x\n" +
                        "tt1zQAa86llOtZOOXLNVSHdUQuNqIyM55daAffW4pSdeW9WwxUeM4W+GVZR5UAel\n" +
                        "97/dX96gtalnK1EnzJqNVrebbWEKVgn0oAsq+yNM3O4IjrcLbGcOOY+XOwA8yaFc\n" +
                        "dbbIC1Yzy9a1PZqwR0oMqBcNM3HjYkMjhpHQ6gT/AANDaXLGqLpaofR9esduaiRY\n" +
                        "7TKCxGZRhAUPE4rGNSv6Gs49P/xBZecaZgWt5tCilDuSnWByVjO2eeKFgOy/xBtd\n" +
                        "yejmNGt6kpU3JUrDhOVHBA8hueVYB7tf2tZecaDzZCFFOSy2Tt60Jp8otl06m9YF\n" +
                        "HkzImVIkNMggZMnl9M0fBUJsUlRbdka8lKN8p88eXL70y7RqiLWmEoQ2ULZCypSS\n" +
                        "Tknlz9KyclqFbG1PWhb5k50uEnwhPU7DzArNqqU+HwNfYZPaUwtSVwWmSo+Fzg6V\n" +
                        "H1zUIIdRJadQhWAeeMiovS7jJjxu+uyOGlsBKFowD9xmjoKh3ZsZG+cb8960UsWG\n" +
                        "RJfJmnK2/huMOBWwJUk5ANHRZWtqSXloCkt/DGwyr+dZqPLLCg14ACr83rTQKGrK\n" +
                        "SDg0aclnAe/21/umr4cRTruhxte/ygAgk0TDkLf1ZSBjyFQmdoYdrb4LQS7cXDpT\n" +
                        "r3Qgee2Dn61IEZ6rdZHB+KIWlwjKGS5pXnzx5Cs9Oukq6cNUp1LqUZ4QGwSPSgrg\n" +
                        "l+dIU9cZLi3dW/iylJPQelVKUI0b4ZCinlk0AWKdbQdKnEpPkTihZUtSFgMLSoY3\n" +
                        "POhHnS8vUoAHltVdAFjz63sFwjbbYYquuriQOZA96APFrSgZWoJHmTiqH5KEtEtu\n" +
                        "oKhyAINECGq4IW0yoakpLmCfKlMeFJdf7uUlLu+RjYY3P6UakGNk+/P/ALP7tVOP\n" +
                        "LWsLVgkcsbV7Lbaad0tcQJwB8UYJPWqwkn5UkjzAoAm88t4guEfSn9ib4jjwiTko\n" +
                        "OlOvW5ms8ULCdZQrAPPG1OLfcipSwiNHRgZOgHOPvVV/82XUf0RbEkXWDPkuIkSm\n" +
                        "wtK2ivOygT0zRXx3viuXYha/EoF0czTFqIJqAHyttOkKBG38RR7XZFLjaFofd0qS\n" +
                        "COXL7UnHqXBZhppb4M/Jeal9oVtSV92Z21u41afptRtzftMJceJZ0iTFSgmQ4rYv\n" +
                        "rJ6+Q9KUsTY8JJXLVw1q24Z+Ye9aO1yVSrOWkwCULdxxlgYbB/OOv09au6rwsAzK\n" +
                        "rzLkvmPJWXgheWio/IEnOMdaYXa9P3JDae7IjrbGEuMxQE/Q52oVfZae9dXWojyZ\n" +
                        "CEqKhIX8MOJG5O/KnLMOLJg95Uy4tYBBQk8yDj+VWSs9OCYjR/ViqFNktp4BDb6l\n" +
                        "K2UWsr36CnMOQ8wkpeiutlR24iVIJHsRSAz3G39UBK4zbZ3bdA1auvLPpTqRDmz4\n" +
                        "P4nJlpUlhvUE75xnlSis7bO87n03dLdGUuTIjhPd16CTvWXaa7zIdClYOSTtnO9a\n" +
                        "qNITIJ0jGnGc71kJnwrg4xnKt1ah70/XPvjopZDslhdIePDMfTsjA1Z54oWurutd\n" +
                        "nB1d6V2PSi4T8dppSZDiU5VnBG5FBfVT6i3RZKk8AownVqB60Sm2v3QcOOppKkeI\n" +
                        "8Ren0r26OWj4WYkjG/UenrQrCpd4JYLyUJb8Q2+lBb7N/pzltnWuclBPDy2fip3H\n" +
                        "t/ei2HVtuJccJcUOZ5Zp7ZSiBG4Mp0E/6yNvai1yYkqPIS06gqaKRjHM7Vn33d67\n" +
                        "cLaqPTe6Y28t99aVJUSgx1pATz1Z9elC26fKZdVGaU2htSSo6mwo596Pv0VUmQjQ\n" +
                        "sI0YJHnQP4ev/cTn2p2r/CErf9sKiS47moTHeGzndo7hdUpnsNqcLEFDetpbWQ5n\n" +
                        "ZW3l6UxstgamIeMhSVFBGMdKZ/5Yab/+dxKc8yrfNU2dVXBuO8/h37e3s9TOAFi5\n" +
                        "SeE2l1WtsJGEnpRKby8lISlGwGBv/elziOG4tB/KSK82/wCqH9ar9L1/n4Oquo7I\n" +
                        "5gzftq7nHTJjRkvrOTpwCtQ86Um+3RhAabzHbQcJJbyDjYbVcH3ghtAcWlLatSNJ\n" +
                        "xg1XOEq4IDaTrVr1b4H/AHnVtVLj/rkX7n+hFuuT1zmpalSVLK0kq4myCRvy6VoY\n" +
                        "s6LGQ6yXE6mBqUlHXPl586xEaI61IHFSABkHejWmAqVpbSOK4kq9wKjqf8GhTbGX\n" +
                        "xQyiFEgyDpCiMubjO2P7UdAu0dhQ42tTC28Kaxn6EUutEkBTiIoSqWMgBQ2PkDQA\n" +
                        "4ZWt5tRwtR1oVuUEbHfr6YpSFbm8GAyBMXHlNrcccLYO4BJzRV2ZEuZx2AlKSnBz\n" +
                        "saFuTCURozjKAOKpKgfNGd6LYlMCGA4r4uvY4Py1oVQcIJMzeo/owN9bQY4QThxJ\n" +
                        "AJx96VTJKEhbQKgsdaJnlaiss/MV7Y2r2ywEzHnGpoGtz5FncjA/tVhTFa8BI6lG\n" +
                        "A4rJz4sEmqorzZ8LydairwlW+K1yOzTTadnNSRvoPI+lZllpniPLS2kpS4dGemKH\n" +
                        "zwaVNbrTTGK7atZ8QbPvRBssmK248ktJATlWlWCR9qBavrz2ooiJVjnlVOo94705\n" +
                        "Haeb0NutqVtvqAH9azba5w+zqy5VpaLYUllC1ma0ZDZbISgqxhW2D/GhW8NkqZSW\n" +
                        "gonYKz+vWrW4rq20qSnwkZG45UWYgEUDR8TG+/rT8YrDNc3vkAKio+Ikn1NeoGVp\n" +
                        "HmaLQ22GyypI7wRt/KgNR8fDJC0HmNsGosg5RxDMOogopNGsNzt8RiO0GnErwdWh\n" +
                        "hQz+lO7tJ7jbXXWWW1KI5qSMivnUD8Qlu8Nx51xzIKQp04x96czbtcrmyGVlkJBU\n" +
                        "DwhgnBwc59qTfRtvfss93HM+hOpanFFavmUdR+tdqPnXEFJKSMEHFeU5RW4Rxid0\n" +
                        "1OWo/9k=\n")).addImage(new Image().setData("/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBwgHBgkIBwgKCgkLDRYPDQwMDRsU\n" +
                "FRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys/RD84QzQ5OjcBCgoKDQwN\n" +
                "Gg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3\n" +
                "Nzc3Nzc3Nzc3N//AABEIAH8AqgMBIgACEQEDEQH/xAAbAAACAwEBAQAAAAAAAAAA\n" +
                "AAAEBQIDBgABB//EADsQAAEDAwIDBgQDBgYDAAAAAAECAwQABRESIRMxQQYUIlFh\n" +
                "cSMygZEVQqFikrHB0eEHFlJTcvAkMzT/xAAZAQACAwEAAAAAAAAAAAAAAAAABAED\n" +
                "BQL/xAAjEQACAwABAwUBAQAAAAAAAAAAAQIDESEEEjETFCJBUTMy/9oADAMBAAIR\n" +
                "AxEAPwDJW4Q9TgmtuKGBo0JJxvVbLyGJLhSklG4SDsQM7VKC5HgqUplyQdWAdR/v\n" +
                "RMWKVPrcdcaCFgqGs+vtWbdcrMwB9a0MSbb3mPFWZKMA+L5uhNWyC68zHAZIdaJP\n" +
                "Dz82T/elMC4qt1wS1BOQpXxdR8Of2fStbe5wLDz6XWGZJbAGgp1pJGNk8/rVBbTZ\n" +
                "6ctPZlmiWy3tXkvFT+sIcW34ShPkM9RvQ3ZMWuTIZZfkFxxtvQl9R+IcnPOhpdzJ\n" +
                "7OfhMaIy6IyS2px9SlKWcbq589+tZ+wW6Y7tFbWl4uBPhyFJGPmJ6CpNGDco6/s3\n" +
                "/bGBbGo34c647HaLiHG+ErHygDf7CsqxZJM3vy7fh5MY/IrwrWOew9qPkTGIbbbF\n" +
                "zdVeJjG6A4fhpPmondXLlU7bd3YQeu0dtkBQKVNLSVHPmDz+nLFQTylgFbLrDjOI\n" +
                "TqiJwkoUVRVFZHUEaudV3OfZGkuy4cdClpcCENKGlJOMnb70HGmMXWOh2Tbpfe0h\n" +
                "ZdmxgUoVq6HITy6Yz9aVItzja2n9SnYrilFt1eTrxsefvj6VLWeSmy9QeYWv9rnk\n" +
                "B2DHhRm2pBQpRA3Cgdj9K9jXG4vIKzIGEndOnnUxHDgkOJi5EdnjKUGwdgcbetFW\n" +
                "SA5e47irZBLCkK0LSQslZwDr+XA58s9Kvrp9RcHVdqmm8NTablBn2aNplJTIRt3f\n" +
                "GVZPL6bc6PjOoZdfUpvU4yvQkg7A4zmkfZrsSYk1T9zl8PSMIMPdRBzndQGOnQ1s\n" +
                "Pw+1jVqbfdCjk6l6c+pwd679o/0q90vwzV4fvT85iRIgPKhIxqdOkIBHVIznfrUp\n" +
                "fbBsBxgS+7pGAyRuV8s4/WtSibbnWlW9EBSUaSgkrz6Z96+W9puy8a1XTvTq5MiI\n" +
                "slSVJAPDGOo5DfyqfaP9O6rlY8w0Ninuq7QKucXhrfksJjHSNjhWQaDTfL/Zpzkc\n" +
                "MNvQkMuaWnBsk6gdX60Oy2q1tMIthcW4pvjx1tDOc7nGcAkdQN6br7QMXFgNS46o\n" +
                "s1kBakOowX09cY5nblS0k4tr8LsTELdydduRmTn31Ic3eQyrTxD060quLEF+Wt23\n" +
                "JejxtvhuNkkE+vX+VbS7tW2RclPwkmOXEILiX29AVtySMbZ6kUnl202ztI5hx2Qh\n" +
                "x3LaAoqTpPQZ2Hr71yczj3xwz86zsQIYkZCJKlgaM51IIzqB8if4UOiUEoCcDYY+\n" +
                "RP8AStPfAJqkzH2iw43hlLC0gaU+w22x+tKtDX+lv9KNM22DrlgoaZcdzwxnHPer\n" +
                "lxpS06VklI5AqFUtPLaJKFYzzo+S6tEZtSDhRCV59FZwPuk/etbsj+HBUmUxb0JW\n" +
                "plK3WtikIJ3pla7kq5PrclxGi29gIWsDUnH6jlQdkgqlT0vvOqcbJwUISCQo7AH6\n" +
                "07kE2S7wVutR2ihw8RKt28Y60lfZBrtiuRhdNNrS64ANW0OtEJcU6SpaDz5U27I3\n" +
                "piLBnMymnJLrxHDQndStuWOdCXWcm6pQ64wywyU6g0zyR7+tANOxWUnhLCDz1A+L\n" +
                "6HmKVLq6JxfyfA0uc23OSNV3Zl96PzMJZSOH+9jn6UzRKtlstiHravX3xJS20tON\n" +
                "/MjpWTkIVPWh5grfWtsuFalHxJ88nnTLspYZN6uTLqm3Q0wjSFkEDGa6jHulh3O+\n" +
                "EHjBJNmuclapi0TXm0u7spSooTv0A5gU7mWq9XqLEZbhx41sh5Wl6Q2pC9zgpxzx\n" +
                "nfl9etblxKrYwpEZxWUqxknNASZUiTp4zyyE8gDgfUDnWhVV2xyQndYpy1FVphW+\n" +
                "0x0hAQ+84nQ5hjQEjOdh7+ZJq6Y8NOmMShsjJSgad6uiwm3Y5kOSAkAnKPQVRKDW\n" +
                "sCPjBTuBVySXgrTaEQfkHGlbh9snFdx5A5rcHqrNPbmh2zdm35togNyJqEgqZcVs\n" +
                "r339TWIh9rrpcg41LtaZjoTqjtRE8PC/2iTyqSBulxSVFaVEKPUGoylGVGdjSfis\n" +
                "uJKVIXuDXcKS02132MY8hbYWprOdJI3GfSvB5daCU2vAktMJ7s681mSXLWw4HVh1\n" +
                "Q0hOckYPICmvaGfZu0UYxYNzc1toVIQWkJ8JTtpBPIHPTyq5TEeUlUeWjXHcGlxO\n" +
                "SMp61l/8kzYdxW9YVxpAWkhMfUUlAP8ALYUvel2D1Vqli+wVi3XTvUZ+5OB1pace\n" +
                "J8LIA9M1sEORIdwVZ++tyUraUh11agS2Vckk9D6Uhj2aZEbK58tpqU4TxQg6k6h5\n" +
                "UvsUqzyb3Hj3FzC3NQCo48Gvoonmo+9Z6WjLGU3tPb48vuUmwNSFIVwVS31LUrI2\n" +
                "5YzzFDusRFuLUhTiUlRISONgD7UGtdyTcHkLYRIYbWvhuoTlYCVY1q/n716Z11z4\n" +
                "L1F09PgI5fapI9CifM90VmLCwVOyi0kcyE6x+nKulvR5sdJtpUG2ChtwLPiXgK5e\n" +
                "pztTP/L7XBeRxXOCQOKrAykegp5Aslj/AAwxo0vhuNo4vGfABWRsPrvV9crJ+GJQ\n" +
                "gq/6IC7K27vLC1xUKjvNrC+FI2K1jcYG21Ke1zl3VOjpu8RLL8lRUhpk6sAdcjnW\n" +
                "2tEoQIUdM65R3k8MBpLaPGseZNZvtNNS7eTOQOIiO2EtJWdIGee/1qh+eR5ZnAND\n" +
                "enqijjRnFIQMEJbOSBUrLHZnXZmJIWA08dtCtTif2Sjn9a13Zm0XGdHKZyWWG1J1\n" +
                "hTTuvb3pqWo/Z9aPw5hovOp+K+oZUoeXpTFNL1NrgXuuSTSfI7u1usUeNFalRW1I\n" +
                "bwG8DcAdDQT0p1xfw3FIQBhKUbJA6UhefefxxnCvHLPSnkFpD5Sgqx4MjBFOKuCe\n" +
                "pCDeljjry2dLgOnbxEVWmK6AJEh9tmEASpRTuAKtkOq4ZjlI0oOArzxS+3yVxrq/\n" +
                "xni9CfIQoaQRGUE5IOehA5+tdkFMLtfaZFwZtcREt0PBWXNASACcBW++PXFE3ZRY\n" +
                "fbajHVrbzjmeZoC+yLP2Rjm42i1KkSHnSUuYOlOd8f8AEViInaG63a/Klyn1DKSE\n" +
                "pSnCUjJ2BoA3Ee8uWxt56Shb0MDU+R4ykDySNz1qyda2ZMQK7O3ZqEt1XjeGF5Tj\n" +
                "kMcjnBpE72nbtNtmqetipZeRoSEb4G+f4j7VnmrE3OhokW7WzqVuyl46U+tAGtnX\n" +
                "+y2a1JgTrg7cp6FJS4tCcHI+bcDzpLM7ayXoS2rXaAuNt/5K+bW/Ufmzy+tLo3ZJ\n" +
                "5bx7y4tCDkkp3JNPrbZ2YDC2NSnkL5hY/pQB5FlvP8JWlKkK+YgbetOrc49HkpcZ\n" +
                "RqJISds10S2JMdKWsMqOdIcGEg+tUye0FlsbyI70wyHNlKLI2B8v0qHFSWMlNp6h\n" +
                "XNsdzZuEsF5HDdSt6KhwZWtefk9Ac86M7PdgESbazJumqBN1uFTaEg6SVk7Gll0/\n" +
                "xKmLfcRAtyWWk7NvPZKyPai7N/iWw8JS7gFpDSElGltS9RydsCs21JTaQ/W52VNx\n" +
                "fgm52Skxwp223B54RysJdS2WzkqyUq/1D9KqZvtyaZQ2/anHHUpCVrTgBShzIGNq\n" +
                "lM/xEgTozjUfvaDwzhtlgjKvc1hTfLjn/wCaX+8KI0zktSLKk+35+Rv2nlvxboru\n" +
                "69K17ZI8P1PQVmFKuSnVd93aySnqM01vFyanxFsoQsKUPmVyqHZuM++2uJ3gurSn\n" +
                "iBtwgJ2wMAnrvTPTQlFvUdSrjPyHx7mmLb2NTK1aUpThAyeeOVaS121y7LcIaWiG\n" +
                "2kFxx5OjKtjpAPM0kZtWVIRNUGEgjWkq3TjpX0W2zreLY3EYc1Ejwg+dU1wjOxpl\n" +
                "d8nXD4g8hxmM2mMwzpbCMc6XUVcf/eP+NC0+korEZzevWdREiI8w0JUWYGJDJC2i\n" +
                "UZ1n/Sd+R5Gh6Mt1vlXBsugBtAOAXF5yfYVJAys91ZvcItJ+BJZID7Dh8SPIjzBq\n" +
                "b0JLzqobhCkHnkZBA3wfQ4x9aEhRxBmrlzi2VMpLfEBwlKPNRPQbVlk3lu+Xm7rj\n" +
                "vyG2yUCI6jbTpSQo48jvjzFADGXfodnaej3Nt55lGpDCEpKtaejaj+UdNXlWWs77\n" +
                "b7DvAaLTSXSEoznAO+P1oKE06mVJblyXZKX9SMr5jO2KeWu0oaaUiKoBKl5OrzwK\n" +
                "AO5b06tFpS1GDEBgqWPEpQ6ivF2yFb4T8u8y22mG8eMH3zt16UDcO1LYjORrNE4S\n" +
                "cbSVnDi/fHSgB66GrK13q7zIkQZCQ2t3KlZ8tufp+tI7p2tLjTrdrbKSccJ90A+W\n" +
                "SU/fr61mHFuP4VJVxHPzEnO/XnXmAkYHLyoAk9IuEh0uyblJdUfmSpfhI8seVR5V\n" +
                "2aHlSQ1lGlRJTzFAFFz+ZrnVsq5TIU9MVESOyHFeFxcVSeIjod8Ut1E48RyPM0Xd\n" +
                "rlNucrjS5br6Ej4aXPye1UW1JptLkc6V2RfHhhbNzabkONSvBxfh60jbUTzx0FHD\n" +
                "si0oAi9QsH9of1pt2N7KW25MoVPkP97J4hQxkAo/aOOW4r6Kx2ctSGW0piMaQkAf\n" +
                "Gz0peMborEMTujB4z4P3J7lhP71FCxXcBLjUJ5fVJQRkeo3pkba+0Mqe7ws89GAg\n" +
                "e3WpuXdq2WwOPFTkgvBGlWThOD9OlR7mwuKI8+bEhTWrnES4oNqwV+NaTjmfIij+\n" +
                "zaYjUWHITPdW4BqwSdzWdbvgcnuukpUh9Kkqa22Chg0TaoMCPMj93m6tKspbCFdQ\n" +
                "rbOPPFWdOn3NtCfUyTjwb1EjvKeJqUrp4qlQVnebQtaX1YSUnQMfmo3kN+g3pwRK\n" +
                "3nkMY1k7+Qqt2XKhMiRbltxn1K0qbSjKCnzx50NPebdSgNqzg1Fl5LmUSl5QBsMf\n" +
                "0oATXifcbg//AOfP4rYSUqYbb0IV/wAh+Y+tStUZ4SELYwjVscKxkYxTBEWEuYdb\n" +
                "YKVk45/Smz1pYtjCZkh1bDIGQ2k+JXTAzzoADZ7PvygSw2hTh+bhnxp/a/vVlwu9\n" +
                "us8QMW5oTrg2QHOIspShXUHzNLLp2ndluKiW+K7CiBOOLrGpw9c43xSVKQkqUB4l\n" +
                "HKj1J9aAJT5Ey7S3JF2cbeB/9TQb8LXngeu32rzA8hUHXkM41qAzyoKNKwtXHc2x\n" +
                "tt1zQAa86llOtZOOXLNVSHdUQuNqIyM55daAffW4pSdeW9WwxUeM4W+GVZR5UAel\n" +
                "97/dX96gtalnK1EnzJqNVrebbWEKVgn0oAsq+yNM3O4IjrcLbGcOOY+XOwA8yaFc\n" +
                "dbbIC1Yzy9a1PZqwR0oMqBcNM3HjYkMjhpHQ6gT/AANDaXLGqLpaofR9esduaiRY\n" +
                "7TKCxGZRhAUPE4rGNSv6Gs49P/xBZecaZgWt5tCilDuSnWByVjO2eeKFgOy/xBtd\n" +
                "yejmNGt6kpU3JUrDhOVHBA8hueVYB7tf2tZecaDzZCFFOSy2Tt60Jp8otl06m9YF\n" +
                "HkzImVIkNMggZMnl9M0fBUJsUlRbdka8lKN8p88eXL70y7RqiLWmEoQ2ULZCypSS\n" +
                "Tknlz9KyclqFbG1PWhb5k50uEnwhPU7DzArNqqU+HwNfYZPaUwtSVwWmSo+Fzg6V\n" +
                "H1zUIIdRJadQhWAeeMiovS7jJjxu+uyOGlsBKFowD9xmjoKh3ZsZG+cb8960UsWG\n" +
                "RJfJmnK2/huMOBWwJUk5ANHRZWtqSXloCkt/DGwyr+dZqPLLCg14ACr83rTQKGrK\n" +
                "SDg0aclnAe/21/umr4cRTruhxte/ygAgk0TDkLf1ZSBjyFQmdoYdrb4LQS7cXDpT\n" +
                "r3Qgee2Dn61IEZ6rdZHB+KIWlwjKGS5pXnzx5Cs9Oukq6cNUp1LqUZ4QGwSPSgrg\n" +
                "l+dIU9cZLi3dW/iylJPQelVKUI0b4ZCinlk0AWKdbQdKnEpPkTihZUtSFgMLSoY3\n" +
                "POhHnS8vUoAHltVdAFjz63sFwjbbYYquuriQOZA96APFrSgZWoJHmTiqH5KEtEtu\n" +
                "oKhyAINECGq4IW0yoakpLmCfKlMeFJdf7uUlLu+RjYY3P6UakGNk+/P/ALP7tVOP\n" +
                "LWsLVgkcsbV7Lbaad0tcQJwB8UYJPWqwkn5UkjzAoAm88t4guEfSn9ib4jjwiTko\n" +
                "OlOvW5ms8ULCdZQrAPPG1OLfcipSwiNHRgZOgHOPvVV/82XUf0RbEkXWDPkuIkSm\n" +
                "wtK2ivOygT0zRXx3viuXYha/EoF0czTFqIJqAHyttOkKBG38RR7XZFLjaFofd0qS\n" +
                "COXL7UnHqXBZhppb4M/Jeal9oVtSV92Z21u41afptRtzftMJceJZ0iTFSgmQ4rYv\n" +
                "rJ6+Q9KUsTY8JJXLVw1q24Z+Ye9aO1yVSrOWkwCULdxxlgYbB/OOv09au6rwsAzK\n" +
                "rzLkvmPJWXgheWio/IEnOMdaYXa9P3JDae7IjrbGEuMxQE/Q52oVfZae9dXWojyZ\n" +
                "CEqKhIX8MOJG5O/KnLMOLJg95Uy4tYBBQk8yDj+VWSs9OCYjR/ViqFNktp4BDb6l\n" +
                "K2UWsr36CnMOQ8wkpeiutlR24iVIJHsRSAz3G39UBK4zbZ3bdA1auvLPpTqRDmz4\n" +
                "P4nJlpUlhvUE75xnlSis7bO87n03dLdGUuTIjhPd16CTvWXaa7zIdClYOSTtnO9a\n" +
                "qNITIJ0jGnGc71kJnwrg4xnKt1ah70/XPvjopZDslhdIePDMfTsjA1Z54oWurutd\n" +
                "nB1d6V2PSi4T8dppSZDiU5VnBG5FBfVT6i3RZKk8AownVqB60Sm2v3QcOOppKkeI\n" +
                "8Ren0r26OWj4WYkjG/UenrQrCpd4JYLyUJb8Q2+lBb7N/pzltnWuclBPDy2fip3H\n" +
                "t/ei2HVtuJccJcUOZ5Zp7ZSiBG4Mp0E/6yNvai1yYkqPIS06gqaKRjHM7Vn33d67\n" +
                "cLaqPTe6Y28t99aVJUSgx1pATz1Z9elC26fKZdVGaU2htSSo6mwo596Pv0VUmQjQ\n" +
                "sI0YJHnQP4ev/cTn2p2r/CErf9sKiS47moTHeGzndo7hdUpnsNqcLEFDetpbWQ5n\n" +
                "ZW3l6UxstgamIeMhSVFBGMdKZ/5Yab/+dxKc8yrfNU2dVXBuO8/h37e3s9TOAFi5\n" +
                "SeE2l1WtsJGEnpRKby8lISlGwGBv/elziOG4tB/KSK82/wCqH9ar9L1/n4Oquo7I\n" +
                "5gzftq7nHTJjRkvrOTpwCtQ86Um+3RhAabzHbQcJJbyDjYbVcH3ghtAcWlLatSNJ\n" +
                "xg1XOEq4IDaTrVr1b4H/AHnVtVLj/rkX7n+hFuuT1zmpalSVLK0kq4myCRvy6VoY\n" +
                "s6LGQ6yXE6mBqUlHXPl586xEaI61IHFSABkHejWmAqVpbSOK4kq9wKjqf8GhTbGX\n" +
                "xQyiFEgyDpCiMubjO2P7UdAu0dhQ42tTC28Kaxn6EUutEkBTiIoSqWMgBQ2PkDQA\n" +
                "4ZWt5tRwtR1oVuUEbHfr6YpSFbm8GAyBMXHlNrcccLYO4BJzRV2ZEuZx2AlKSnBz\n" +
                "saFuTCURozjKAOKpKgfNGd6LYlMCGA4r4uvY4Py1oVQcIJMzeo/owN9bQY4QThxJ\n" +
                "AJx96VTJKEhbQKgsdaJnlaiss/MV7Y2r2ywEzHnGpoGtz5FncjA/tVhTFa8BI6lG\n" +
                "A4rJz4sEmqorzZ8LydairwlW+K1yOzTTadnNSRvoPI+lZllpniPLS2kpS4dGemKH\n" +
                "zwaVNbrTTGK7atZ8QbPvRBssmK248ktJATlWlWCR9qBavrz2ooiJVjnlVOo94705\n" +
                "Haeb0NutqVtvqAH9azba5w+zqy5VpaLYUllC1ma0ZDZbISgqxhW2D/GhW8NkqZSW\n" +
                "gonYKz+vWrW4rq20qSnwkZG45UWYgEUDR8TG+/rT8YrDNc3vkAKio+Ikn1NeoGVp\n" +
                "HmaLQ22GyypI7wRt/KgNR8fDJC0HmNsGosg5RxDMOogopNGsNzt8RiO0GnErwdWh\n" +
                "hQz+lO7tJ7jbXXWWW1KI5qSMivnUD8Qlu8Nx51xzIKQp04x96czbtcrmyGVlkJBU\n" +
                "DwhgnBwc59qTfRtvfss93HM+hOpanFFavmUdR+tdqPnXEFJKSMEHFeU5RW4Rxid0\n" +
                "1OWo/9k=\n"));
        createDataRetrofit.executeCreateData(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new CreateDetectionRequestEnvelope(
                        detectionFragment.actvManufacture.getText().toString(),
                        detectionFragment.actvModel.getText().toString(),
                        detectionFragment.spnContractor.getSelectedItem().toString(),
                        detectionFragment.spnPoliceDepartment.getSelectedItem().toString(),
                        ((detectionFragment.swTypeVehicle.isChecked())?"2":"1"),
                        detectionFragment.edtCarID.getText().toString(),
                        detectionFragment.edtStreet.getText().toString(),
                        detectionFragment.edtVIN.getText().toString(),
                        detectionFragment.edtColor.getText().toString(),
                        imageList
                )
        ).enqueue(createDataCall);
    }
}
