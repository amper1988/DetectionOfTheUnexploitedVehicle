package com.belspec.detectionoftheunexploitedvehicle;


import android.app.FragmentTransaction;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.belspec.detectionoftheunexploitedvehicle.Interface.DetectionRegisterListener;
import com.belspec.detectionoftheunexploitedvehicle.Interface.ResponseListener;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Api;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Request.CreateDetectionRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.CreateDetection.Response.CreateDetectionResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Contractor;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Manufacture;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Model;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.PoliceDepartment;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Request.GetDefaultDataRequestEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.Model.TakeDefaultData.Response.GetDefaultDataResponseEnvelope;
import com.belspec.detectionoftheunexploitedvehicle.Retrofit.RetrofitService;
import com.belspec.detectionoftheunexploitedvehicle.Utils.Encode;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;

public class ControlActivity extends AppCompatActivity implements View.OnClickListener, ResponseListener, DetectionRegisterListener{
    TextView txvName;
    Button btnLogout;
    Button btnDetection;
    FragmentTransaction fTrans;
    DetectionFragment detectionFragment;
    LoadingFragment loadingFragment;

    @Override
    protected void onPostResume() {
        super.onPostResume();
        if (!UserManager.getInstanse().ismRegistered()){
            logout();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        UserManager.getInstanse().logout();
        Intent intent = new Intent(this, MainActivity.class);
        startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.control_activity);
        if (UserManager.getInstanse().ismRegistered()){
            initViews();
            initComponent();
        }else{
            logout();
        }


    }

    private void initViews(){
        txvName = (TextView)findViewById(R.id.txvUsername);
        btnLogout = (Button)findViewById(R.id.btnLogout);
        btnDetection = (Button) findViewById(R.id.btnDetection);

    }

    private void initComponent(){
        btnLogout.setOnClickListener(this);
        btnDetection.setOnClickListener(this);
        txvName.setText(UserManager.getInstanse().getmLogin());
        detectionFragment = new DetectionFragment();
        detectionFragment.setDetectionRegisterListener(this);
    }

    private void logout(){
        UserManager.getInstanse().logout();
        Intent intent = new Intent(this, MainActivity.class);
        startActivity(intent);
        closeActivity();

    }

    private void closeActivity(){
        this.finish();
    }

    @Override
    public void onClick(View view) {
        fTrans = getFragmentManager().beginTransaction();
        switch (view.getId()){
            case R.id.btnDetection:
                fTrans.replace(R.id.frgmCont, detectionFragment);
                fTrans.commit();

                RetrofitService retrofitService = Api.createRetrofitService();
                MyCallback<GetDefaultDataResponseEnvelope> call = new MyCallback<>();
                call.addResponseListener(this);
                retrofitService.executeGetDefaultData(
                        Encode.getBasicAuthTemplate(
                                UserManager.getInstanse().getmLogin(),
                                UserManager.getInstanse().getmPassword()
                        ),
                        new GetDefaultDataRequestEnvelope()
                ).enqueue(call);

                break;
            case R.id.btnLogout:
                logout();
                break;
            case R.id.btnRegister:

                break;
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if (response.body().getClass() == GetDefaultDataResponseEnvelope.class){
            GetDefaultDataResponseEnvelope responseEnvelope = (GetDefaultDataResponseEnvelope)response.body();
            List<Manufacture> manufactures = responseEnvelope.body().getManufactureList();
            ArrayList<String> stringArrayManufactureList = new ArrayList<>();
            for ( Manufacture manufacture : manufactures) {
                stringArrayManufactureList.add(manufacture.getName());
            }
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayManufactureList );
            // присваиваем адаптер списку
            //actvCarModel.setAdapter(arrayAdapter);
            detectionFragment.actvManufacture.setAdapter(arrayAdapterManufacture);

            List<Model> models = responseEnvelope.body().getModelList();
            ArrayList<String> stringArrayModelList = new ArrayList<>();
            for ( Model model : models) {
                stringArrayModelList.add(model.getName());
            }
            ArrayAdapter<String> arrayAdapterModel  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayModelList );
            detectionFragment.actvModel.setAdapter(arrayAdapterModel);

            List<Contractor> contractors = responseEnvelope.body().getContractorList();
            ArrayList<String> stringArrayContractorList = new ArrayList<>();
            for ( Contractor contractor : contractors) {
                stringArrayContractorList.add(contractor.getName());
            }
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayContractorList );
            detectionFragment.actvContractor.setAdapter(arrayAdapterContractor);

            List<PoliceDepartment> policeDepartments = responseEnvelope.body().getPoliceDepartmentList();
            ArrayList<String> stringArrayPoliceDepartments = new ArrayList<>();
            for ( PoliceDepartment policeDepartment : policeDepartments) {
                stringArrayPoliceDepartments.add(policeDepartment.getName());
            }
            ArrayAdapter<String> arrayAdapterPoliceDepartments  = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, stringArrayPoliceDepartments );
            detectionFragment.actvPoliceDepartment.setAdapter(arrayAdapterPoliceDepartments);
            Log.d("ERROR", response.message());
        }else if(response.body().getClass() == CreateDetectionResponseEnvelope.class){
            CreateDetectionResponseEnvelope responseEnvelope = (CreateDetectionResponseEnvelope) response.body();
            fTrans = getFragmentManager().beginTransaction();
            fTrans.remove(loadingFragment);
            fTrans.commit();
            Toast.makeText(this, "Registered by ID: " + responseEnvelope.getDocId(), Toast.LENGTH_LONG).show();
            Log.d("ERROR", responseEnvelope.getDocId());
        }

    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this, "Wrong authorization. Response code: " + response.code()+ " " + response.message(), Toast.LENGTH_SHORT).show();
        Log.d("ERROR", response.message());
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this, "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        Log.d("ERROR", t.getLocalizedMessage());
    }

    @Override
    public void registration() {
        fTrans = getFragmentManager().beginTransaction();
        loadingFragment = new LoadingFragment();
        fTrans.replace(R.id.frgmCont, loadingFragment);
        fTrans.commit();
        RetrofitService createDataRetrofit = Api.createRetrofitService();
        MyCallback<CreateDetectionResponseEnvelope> createDataCall = new MyCallback<>();
        createDataCall.addResponseListener(this);
        createDataRetrofit.executeCreateData(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new CreateDetectionRequestEnvelope(
                        detectionFragment.actvManufacture.getText().toString(),
                        detectionFragment.actvModel.getText().toString(),
                        detectionFragment.actvContractor.getText().toString(),
                        detectionFragment.actvPoliceDepartment.getText().toString(),
                        "1",
                        detectionFragment.edtCarID.getText().toString(),
                        "Sample",
                        detectionFragment.edtVIN.getText().toString()
                )
        ).enqueue(createDataCall);
    }
}
