package com.belspec.unexploited.app.ui.control.detection;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.drawable.AnimationDrawable;
import android.os.Bundle;
import android.provider.Settings;
import android.support.v4.app.Fragment;
import android.support.v7.app.AlertDialog;
import android.support.v7.view.ContextThemeWrapper;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.SpinnerAdapter;
import android.widget.TextView;

import com.belspec.unexploited.app.R;
import com.belspec.unexploited.app.utils.AppHolder;
import com.belspec.unexploited.app.utils.Utils;

import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;


public class DetectionFragment extends Fragment implements View.OnClickListener, DetectionContract.View,TextView.OnEditorActionListener{

    @BindView(R.id.actvManufacture) AutoCompleteTextView actvManufacture;
    @BindView(R.id.actvModel) AutoCompleteTextView actvModel;
    @BindView(R.id.svDetection) ScrollView svMain;
    @BindView(R.id.spnContractor) Spinner spnContractor;
    @BindView(R.id.spnPoliceDepartment) Spinner spnPoliceDepartment;
    @BindView(R.id.edtVIN) EditText edtVIN;
    @BindView(R.id.edtCarID) EditText edtCarID;
    @BindView(R.id.edtColor) EditText edtColor;
    @BindView(R.id.edtStreet) EditText edtStreet;
    @BindView(R.id.rbCarTypeStrong) RadioButton rbCarTypeStrong;
    @BindView(R.id.rbCarTypeLight) RadioButton rbCarTypeLight;
    @BindView(R.id.btnRegister) Button btnRegister;
    @BindView(R.id.rvImageList) RecyclerView rvImageList;
    @BindView(R.id.btnAddImage) Button btnAddImage;
    @BindView(R.id.imvLoading) ImageView imvLoading;
    DetectionContract.Presenter presenter;
    View mView;
    final int REQUEST_CODE_PHOTO = 1;

    @Override
    public View onCreateView(LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.detection_fragment, container, false);
        ButterKnife.bind(this, mView);
        initViews();
        presenter = new DetectionPresenter(this);
        presenter.onCreate();
        return  mView;
    }

    @Override
    public void onDestroyView() {
        presenter.onDestroy();
        super.onDestroyView();
    }

    private void initViews(){
        imvLoading.setBackgroundResource(R.drawable.pb_loading);
        actvManufacture.setOnEditorActionListener(this);
        actvManufacture.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        actvModel.setOnEditorActionListener(this);
        actvModel.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtCarID.setOnEditorActionListener(this);
        edtCarID.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtVIN.setOnEditorActionListener(this);
        edtVIN.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtStreet.setOnEditorActionListener(this);
        edtStreet.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtColor.setOnEditorActionListener(this);
        edtColor.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        LinearLayoutManager llm = new LinearLayoutManager(getActivity());
        llm.setOrientation(LinearLayoutManager.HORIZONTAL);
        rvImageList.setLayoutManager(llm);
        btnAddImage.setOnClickListener(this);
        btnRegister.setOnClickListener(this);
    }


    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case (R.id.btnRegister):
                Utils.hideKeyboard(getActivity());
                presenter.onRegister();
                break;
            case (R.id.btnAddImage):
                Utils.hideKeyboard(getActivity());
                presenter.getStreet();
                presenter.onAddImageClick();
                break;
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                presenter.onAddImage();

            }else if (resultCode == Activity.RESULT_CANCELED) {
                presenter.onAddImageCancel();
            }
        }
    }

    @Override
    public void setLoading(boolean bool) {
        AnimationDrawable animation = (AnimationDrawable) imvLoading.getBackground();
        if(bool){
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
            svMain.setVisibility(View.GONE);
        }else{
            imvLoading.setVisibility(View.GONE);
            animation.stop();
            svMain.setVisibility(View.VISIBLE);

        }
    }

    @Override
    public void setStreet(String street) {
        edtStreet.setText(street);
    }

    @Override
    public void setManufacturesList(List<String> manufacturesList) {
        actvManufacture.setAdapter(new ArrayAdapter<>(getActivity(), R.layout.spinner_item, manufacturesList));
    }

    @Override
    public void setModelList(List<String> modelList) {
        actvModel.setAdapter(new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, modelList));
    }

    @Override
    public void setContractorList(List<String> contractorList) {
        spnContractor.setAdapter(new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, contractorList));
    }

    @Override
    public void setPoliceDepartmentList(List<String> policeDepartmentList) {
        spnPoliceDepartment.setAdapter(new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, policeDepartmentList));
    }

    @Override
    public void showDialogMessage(String message) {
        Utils.showMessage(getActivity(), message);
    }

    @Override
    public void setManufacture(String manufacture) {
        actvManufacture.setText(manufacture);
    }

    @Override
    public String getManufacture() {
        return actvManufacture.getText().toString();
    }

    @Override
    public void setModel(String model) {
        actvModel.setText(model);
    }

    @Override
    public String getModel() {
        return actvModel.getText().toString();
    }

    @Override
    public void setContractor(String contractor) {
        SpinnerAdapter adapter = spnContractor.getAdapter();
        if(adapter != null){
            int size = adapter.getCount();
            for(int i = 0; i > size; i++){
                if(adapter.getItem(i).equals(contractor)){
                    spnContractor.setSelection(i);
                    break;
                }
            }
        }
    }

    @Override
    public String getContractor() {
        return spnContractor.getSelectedItem().toString();
    }

    @Override
    public void setPoliceDepartment(String policeDepartment) {
        SpinnerAdapter adapter = spnPoliceDepartment.getAdapter();
        if(adapter != null){
            int size = adapter.getCount();
            for(int i = 0; i > size; i++){
                if(adapter.getItem(i).equals(policeDepartment)){
                    spnPoliceDepartment.setSelection(i);
                    break;
                }
            }
        }
    }

    @Override
    public String getPoliceDepartment() {
        return spnPoliceDepartment.getSelectedItem().toString();
    }

    @Override
    public void setCarId(String carId) {
        edtCarID.setText(carId);
    }

    @Override
    public String getCarId() {
        return edtCarID.getText().toString();
    }

    @Override
    public String getStreet() {
        return edtStreet.getText().toString();
    }

    @Override
    public void setVin(String vin) {
        edtVIN.setText(vin);
    }

    @Override
    public String getVin() {
        return edtVIN.getText().toString();
    }

    @Override
    public void setColor(String color) {
        edtColor.setText(color);
    }

    @Override
    public String getColor() {
        return edtColor.getText().toString();
    }

    @Override
    public boolean isTypeLight() {
        return rbCarTypeLight.isChecked();
    }

    @Override
    public boolean isTypeStrong() {
        return rbCarTypeStrong.isChecked();
    }

    @Override
    public void startPhotoActivity(Intent intent) {
        startActivityForResult(intent, REQUEST_CODE_PHOTO);
    }

    @Override
    public void showGPSAlert() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(new ContextThemeWrapper(getContext(), R.style.MyMaterialTheme));

        // Setting Dialog Title
        alertDialog.setTitle("Настойте GPS");

        // Setting Dialog Message
        alertDialog.setMessage("Определение GPS-координат отключено. Хотите перейти в настройки?");

        // On pressing the Settings button.
        alertDialog.setPositiveButton("Настройки", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog,int which) {
                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivity(intent);
            }
        });
        // On pressing the cancel button
        alertDialog.setNegativeButton("Отмена", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });
        // Showing Alert Message
        alertDialog.show();
    }

    @Override
    public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
        if (actionId == EditorInfo.IME_ACTION_NEXT) {
            int id = textView.getId();
            switch (id){
                case R.id.actvManufacture:
                    actvModel.requestFocus();
                    return true;
                case R.id.actvModel:
                    edtCarID.requestFocus();
                    return true;
                case R.id.edtCarID:
                    edtStreet.requestFocus();
                    return true;
                case R.id.edtStreet:
                    edtColor.requestFocus();
                    return true;
                case R.id.edtColor:
                    edtVIN.requestFocus();
                    return true;
                case R.id.edtVIN:
                    spnContractor.requestFocus();
                    return true;
            }
        }
        return false;
    }

    @Override
    public void setAdapter(RecyclerView.Adapter adapter) {
        rvImageList.setAdapter(adapter);
    }

}
