package com.belspec.unexploited.app.ui.editDoc;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;

import com.belspec.unexploited.app.adapters.ImageListAdapter;
import com.belspec.unexploited.app.gps.GPSTracker;
import com.belspec.unexploited.app.retrofit.Api;
import com.belspec.unexploited.app.retrofit.RetrofitService;
import com.belspec.unexploited.app.retrofit.model.DetectionDoc;
import com.belspec.unexploited.app.retrofit.model.Image;
import com.belspec.unexploited.app.retrofit.model.ImageList;
import com.belspec.unexploited.app.retrofit.model.addPhoto.request.AddPhotoRequestEnvelope;
import com.belspec.unexploited.app.retrofit.model.addPhoto.response.AddPhotoResponseEnvelope;
import com.belspec.unexploited.app.retrofit.model.getItemImage.request.GetItemImageRequestEnvelope;
import com.belspec.unexploited.app.retrofit.model.getItemImage.response.GetItemImageResponseEnvelope;
import com.belspec.unexploited.app.utils.Converter;
import com.belspec.unexploited.app.utils.Encode;
import com.belspec.unexploited.app.utils.FileManager;
import com.belspec.unexploited.app.utils.UserManager;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


class EditDocPresenter implements EditDocContract.Presenter {
    private EditDocContract.View view;
    private Context context;
    private DetectionDoc detectionDoc;
    private ImageListAdapter imageListAdapter;
    private static final String PARCEL_KEY_ADDED_LIST_ADAPTER = "addedImageListAdapter";
    private int curItem;
    private ArrayList<String> stringArrayParkingList;
    private static final String PARCEL_KEY_IMAGE_LIST_ADAPTER = "imageListAdapter";
    private static final String PARCEL_KEY_PARKING_LIST = "parkingList";
    private ImageListAdapter addedImageListAdapter;

    EditDocPresenter(EditDocContract.View view) {
        this.view = view;
        this.context = view.getViewContext();
        curItem = 1;
    }

    @Override
    public void onCreate(Bundle savedInstanceState, Intent intent) {
        detectionDoc = intent.getParcelableExtra(DetectionDoc.class.getCanonicalName());
        view.showDocInfo(detectionDoc);
        if (savedInstanceState == null) {
            Log.d("DEBUG", "initComponents(null) EditDocActivity");
            view.setLoading(true);
            imageListAdapter = new ImageListAdapter();
            addedImageListAdapter = new ImageListAdapter();
            view.setNetworkAdapter(imageListAdapter);
            view.setAddedAdapter(addedImageListAdapter);
            curItem = 1;
            getImageFromApi(detectionDoc.getId(), curItem);
        } else {
            Log.d("DEBUG", "initCompontnts(bundl) EditDocActivity");
            view.setLoading(false);
            imageListAdapter = savedInstanceState.getParcelable(PARCEL_KEY_IMAGE_LIST_ADAPTER);
            view.setNetworkAdapter(imageListAdapter);
            addedImageListAdapter = savedInstanceState.getParcelable(PARCEL_KEY_ADDED_LIST_ADAPTER);
            view.setAddedAdapter(addedImageListAdapter);
            stringArrayParkingList = savedInstanceState.getStringArrayList(PARCEL_KEY_PARKING_LIST);
        }
        imageListAdapter.setImageClickListener(new ImageListAdapter.ImageClickListener() {
            @Override
            public void onImageClick(String id) {
                if (id != null && !id.isEmpty()) {
                    view.showImage(id);
                }
            }
        });
    }

    @Override
    public void onSavedInstanceState(Bundle bundle) {
        Log.d("DEBUG", "onSaveInstanceState() EditDocActivity");
        bundle.putStringArrayList(PARCEL_KEY_PARKING_LIST, stringArrayParkingList);
        bundle.putParcelable(PARCEL_KEY_IMAGE_LIST_ADAPTER, imageListAdapter);
        bundle.putParcelable(PARCEL_KEY_ADDED_LIST_ADAPTER, addedImageListAdapter);
    }

    @Override
    public void onAddImageClick() {
        Log.d("DEBUG", "onClick(btnEvacuationAddImage) EditDocActivity");
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        File photoFile = null;
        try {
            photoFile = FileManager.createImageFile(context);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        if (photoFile != null) {
            addedImageListAdapter.addFilePath(photoFile.getAbsolutePath());
            Uri photoURI = Uri.fromFile(photoFile);
            intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
            view.startPhotoActivity(intent);
        }
    }

    @Override
    public void onAddImage() {
        GPSTracker gps = GPSTracker.getInstance();
        Converter.compressImage(addedImageListAdapter.getCurrentPath(), Bitmap.CompressFormat.JPEG, 80, 1024);
        if (gps.setGpsToFile(addedImageListAdapter.getCurrentPath())) {
            BitmapFactory.Options opt = new BitmapFactory.Options();
            opt.inSampleSize = 8;
            Bitmap bitmap = BitmapFactory.decodeFile(addedImageListAdapter.getCurrentPath(), opt);
            addedImageListAdapter.add(bitmap);
        } else {
            addedImageListAdapter.deleteCurrentPath();
        }
    }

    @Override
    public void onAddImageCancel() {
        addedImageListAdapter.deleteCurrentPath();
    }

    @Override
    public void onSaveClick() {
        Log.d("DEBUG", "onClick(btnSave) EditDocActivity");
        view.setLoading(true);
        saveDoc();
    }

    @Override
    public void onDestroy() {
        Log.d("DEBUG", "onDestroy EditDocActivity");
        imageListAdapter.clear();
    }

    private void saveDoc() {
        Log.d("DEBUG", "SaveDoc EditDocActivity");
        RetrofitService retrofitService = Api.createRetrofitService();
        ImageList imageList = new ImageList();
        int count = addedImageListAdapter.getFilePathCount();
        if (count > 0) {
            for (int i = 0; i < count; i++) {
                imageList.addImage(new Image().setData(Converter.encodeToBase64(addedImageListAdapter.getFilePath(i))));
            }
        } else {
            imageList.addImage(new Image().setData(""));
        }
        retrofitService.executeAddPhoto(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new AddPhotoRequestEnvelope(
                        detectionDoc.getId(),
                        imageList)
        ).enqueue(new Callback<AddPhotoResponseEnvelope>() {
            @Override
            public void onResponse(Call<AddPhotoResponseEnvelope> call, Response<AddPhotoResponseEnvelope> response) {
                view.setLoading(false);
                if (response.isSuccessful()) {
                    Log.d("DEBUG", "AuthorizationOK(addPhoto) EditDocActivity");
                    AddPhotoResponseEnvelope responseEnvelope = response.body();
                    if (responseEnvelope != null) {
                        if (responseEnvelope.getBool()) {
                            view.showMessage("Успешно сохранено");
                            view.close();
                        } else {
                            view.showMessage("Ошибка при сохранении на сервере");
                        }
                    } else {
                        view.showMessage("Ответ сервера не содержит результата");
                    }
                } else {
                    Log.d("ERROR", response.message());
                    view.showMessage("Произошла непредвиденная ошибка");
                }
            }

            @Override
            public void onFailure(Call<AddPhotoResponseEnvelope> call, Throwable t) {
                Log.d("ERROR", t.getMessage());
                view.showMessage("Произошла непредвиденная ошибка");
                view.setLoading(false);
            }
        });
    }

    private void getImageFromApi(String docId, int index) {
        RetrofitService retrofitService = Api.createRetrofitService();
        retrofitService.executeGetItemImage(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetItemImageRequestEnvelope(docId, index)
        ).enqueue(new Callback<GetItemImageResponseEnvelope>() {
            @Override
            public void onResponse(Call<GetItemImageResponseEnvelope> call, Response<GetItemImageResponseEnvelope> response) {
                view.setLoading(false);
                if (response.isSuccessful()) {
                    Log.d("DEBUG", "AutorizationOK(getItemImage) EditDocActivity");
                    GetItemImageResponseEnvelope responseEnvelope = response.body();
                    if (responseEnvelope != null) {
                        view.setNetworkAdapter(imageListAdapter);
                        imageListAdapter.addBitmapWithId(Converter.getBitmapFromBase64Stirng(context, responseEnvelope.getImage()), responseEnvelope.getId());
                        curItem++;
                        getImageFromApi(detectionDoc.getId(), curItem);
                    }
                } else {
                    Log.d("ERROR", response.message());
                }
            }

            @Override
            public void onFailure(Call<GetItemImageResponseEnvelope> call, Throwable t) {
                Log.d("ERROR", t.getMessage());
                view.setLoading(false);
            }
        });
    }
}
