package com.belspec.unexploited.app.ui.editDoc;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.AnimationDrawable;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.belspec.unexploited.app.R;
import com.belspec.unexploited.app.retrofit.model.DetectionDoc;
import com.belspec.unexploited.app.ui.ImageActivity;
import com.belspec.unexploited.app.utils.Converter;

import java.text.SimpleDateFormat;

import butterknife.BindView;
import butterknife.ButterKnife;


public class EditDocActivity extends AppCompatActivity implements EditDocContract.View {
    @BindView(R.id.btnEvacuationAddImage)
    Button btnAddImage;
    @BindView(R.id.btnSave)
    Button btnSave;
    @BindView(R.id.txvItemManuf)
    TextView txvEvacuationManufacture;
    @BindView(R.id.txvItemModel)
    TextView txvEvacuationModel;
    @BindView(R.id.txvDocId)
    TextView txvEvacuationDocId;
    @BindView(R.id.txvItemCarID)
    TextView txvEvacuationCarId;
    @BindView(R.id.txvItemPoliceDep)
    TextView txvPoliceDepartment;
    @BindView(R.id.txvDateDetection)
    TextView txvEvacuationDateDetection;
    @BindView(R.id.txvReleaseDate)
    TextView txvReleaseDate;
    @BindView(R.id.txvEvacuationDate)
    TextView txvEvacuationDate;
    @BindView(R.id.txvUtilizationDate)
    TextView txvUtilizationDate;
    @BindView(R.id.txvNoticeIn)
    TextView txvNoticeIn;
    @BindView(R.id.txvNoticeOut)
    TextView txvNoticeOut;
    @BindView(R.id.txvItemContractor)
    TextView txvEvacuationContractor;
    @BindView(R.id.txvStatus)
    TextView txvStatus;
    @BindView(R.id.imvFoto)
    ImageView imvAvatar;
    @BindView(R.id.rvEvacuationImageList)
    RecyclerView rvImageFromBase;
    @BindView(R.id.txvParking)
    TextView txvParking;
    @BindView(R.id.svAll)
    ScrollView svAll;
    @BindView(R.id.imvLoading)
    ImageView imvLoading;
    @BindView(R.id.toolbar)
    Toolbar toolbar;
    @BindView(R.id.rvAddedImageList)
    RecyclerView addedImageRecycler;
    private EditDocContract.Presenter presenter;
    LinearLayoutManager llm;
    final int REQUEST_CODE_PHOTO = 1;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d("DEBUG", "onCreate EditDocActivity");
        setContentView(R.layout.edit_doc_activity);
        ButterKnife.bind(this);
        initViews();
        initComponents();
        presenter = new EditDocPresenter(this);
        presenter.onCreate(savedInstanceState, getIntent());
    }

    private void initViews() {
        Log.d("DEBUG", "initViews() EditDocActivity");
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null)
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        imvLoading.setBackgroundResource(R.drawable.pb_loading);
    }

    private void initComponents() {
        Log.d("DEBUG", "initComponents(common) EditDocActivity");
        btnAddImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                presenter.onAddImageClick();
            }
        });
        btnSave.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                presenter.onSaveClick();
            }
        });
        llm = new LinearLayoutManager(this);
        llm.setOrientation(LinearLayoutManager.HORIZONTAL);
        rvImageFromBase.setLayoutManager(llm);
        addedImageRecycler.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            finish();
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        presenter.onSavedInstanceState(outState);
        super.onSaveInstanceState(outState);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        Log.d("DEBUG", "onActivityResult EditDocActivity");
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                presenter.onAddImage();

            } else if (resultCode == Activity.RESULT_CANCELED) {
                presenter.onAddImageCancel();

            }
        }
    }

    @Override
    protected void onDestroy() {
        presenter.onDestroy();
        super.onDestroy();

    }

    @Override
    public Context getViewContext() {
        return getApplication();
    }

    @Override
    public void setLoading(boolean bool) {
        Log.d("DEBUG", "setLoading(" + bool + ") EditDocActivity");
        AnimationDrawable animation = (AnimationDrawable) imvLoading.getBackground();
        if (bool) {
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
            svAll.setVisibility(View.GONE);
        } else {
            imvLoading.setVisibility(View.GONE);
            animation.stop();
            svAll.setVisibility(View.VISIBLE);
        }
    }

    @Override
    public void startPhotoActivity(Intent intent) {
        startActivityForResult(intent, REQUEST_CODE_PHOTO);
    }

    @Override
    public void showDocInfo(DetectionDoc doc) {
        setTextTo(txvStatus, "Статус", doc.getStatus());
        setTextTo(txvEvacuationDocId, "Документ №", doc.getId());
        setTextTo(txvEvacuationManufacture, "Марка", doc.getManufacture());
        setTextTo(txvEvacuationModel, "Модель", doc.getModel());
        setTextTo(txvEvacuationCarId, "Регистрационный номер", doc.getCarId());
        setTextTo(txvPoliceDepartment, "ГАИ", doc.getPolDep());
        setTextTo(txvEvacuationContractor, "Район", doc.getContractor());
        setTextTo(txvParking, "Стоянка", doc.getParking());
        imvAvatar.setImageBitmap(Converter.getBitmapFromBase64Stirng(this, doc.getImage()));

        SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
        try {
            setTextTo(txvEvacuationDateDetection, "Дата обнаружения", df.format(doc.getDateDetection()));
        } catch (Exception e) {
            setTextTo(txvEvacuationDateDetection, "", "");
        }
        try {
            setTextTo(txvReleaseDate, "Дата выдачи", df.format(doc.getReleaseDate()));
        } catch (Exception e) {
            setTextTo(txvReleaseDate, "", "");
        }
        try {
            setTextTo(txvEvacuationDate, "Дата эвакуации", df.format(doc.getEvacuationDate()));
        } catch (Exception e) {
            setTextTo(txvEvacuationDate, "", "");
        }
        try {
            setTextTo(txvUtilizationDate, "Дата утилизации", df.format(doc.getUtilizationDate()));
        } catch (Exception e) {
            setTextTo(txvUtilizationDate, "", "");
        }
        try {
            setTextTo(txvNoticeIn, "Дата получения извещения владельцем", df.format(doc.getNoticeIn()));
        } catch (Exception e) {
            setTextTo(txvNoticeIn, "", "");
        }
        try {
            setTextTo(txvNoticeOut, "Дата отправления извещения владельцу", df.format(doc.getNoticeOut()));
        } catch (Exception e) {
            setTextTo(txvNoticeOut, "", "");
        }

    }

    private void setTextTo(TextView textView, String prefix, String argument) {
        textView.setVisibility(argument != null && !argument.isEmpty() ? View.VISIBLE : View.GONE);
        textView.setText(String.format("%s : %s", prefix, argument));
    }

    @Override
    public void setNetworkAdapter(RecyclerView.Adapter adapter) {
        rvImageFromBase.setAdapter(adapter);
    }

    @Override
    public void setAddedAdapter(RecyclerView.Adapter adapter) {
        addedImageRecycler.setAdapter(adapter);
    }

    @Override
    public void showMessage(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }

    @Override
    public void showImage(String id) {
        startActivity(ImageActivity.getIntent(this, id));
    }

    @Override
    public void close() {
        setResult(Activity.RESULT_OK);
        finish();
    }
}
