package com.belspec.unexploited.app.ui.main;

import android.location.Location;
import android.os.Bundle;

import com.belspec.unexploited.app.gps.GPSTracker;
import com.belspec.unexploited.app.retrofit.Api;
import com.belspec.unexploited.app.retrofit.model.test.request.TestRequestEnvelope;
import com.belspec.unexploited.app.retrofit.model.test.response.TestResponseEnvelope;
import com.belspec.unexploited.app.utils.AppHolder;
import com.belspec.unexploited.app.utils.Encode;
import com.belspec.unexploited.app.utils.UserManager;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

class MainPresenter implements MainContract.Presenter, GPSTracker.LocationDataChangeListener{
    private MainContract.View view;
    private GPSTracker gpsTracker;

    MainPresenter(MainContract.View view){
        this.view = view;
        AppHolder.getInstance().setmContext(view.getContext());
        gpsTracker = GPSTracker.getInstance();
    }

    @Override
    public void onCreate(Bundle bundle) {
        view.setLogin(UserManager.getInstanse().getmLogin());
        view.setPassword(UserManager.getInstanse().getmPassword());
    }

    @Override
    public void onResume() {
        gpsTracker.setDataChangeListener(this);
        if(!gpsTracker.canGetLocation()){
            gpsTracker.showSettingsAlert();
        }else{
            gpsTracker.startUsingGPS();
        }
    }

    @Override
    public void onPause() {
        gpsTracker.unsetDataChangeListener(this);
    }

    @Override
    public void onLogin() {
        view.setLoading(true);
        Api.createRetrofitService().executeTestOperation(
                Encode.getBasicAuthTemplate(
                        view.getLogin(), view.getPassword()
                ),
                new TestRequestEnvelope())
                .enqueue(new Callback<TestResponseEnvelope>() {
                    @Override
                    public void onResponse(Call<TestResponseEnvelope> call, Response<TestResponseEnvelope> response) {
                        view.setLoading(false);
                        if(response.isSuccessful()){
                            UserManager.getInstanse().setUserData(view.getLogin(), view.getPassword(), (response.body()).getValue(), true);
                            view.showMessage(response.code() + " " + response.message());
                            view.afterLogin();
                        }else{
                            view.showMessage("Ошибка " + response.code() + response.message());
                        }

                    }

                    @Override
                    public void onFailure(Call<TestResponseEnvelope> call, Throwable t) {
                        view.setLoading(false);
                        view.showMessage("Ошибка " + t.getMessage());
                    }
                });
    }

    @Override
    public void onLocationDataChange(String locationAction, Location location) {
        if(locationAction.equals(GPSTracker.PROVIDER_DISABLED)){
            if(!gpsTracker.canGetLocation()){
                gpsTracker.showSettingsAlert();
            }
        }
    }
}
