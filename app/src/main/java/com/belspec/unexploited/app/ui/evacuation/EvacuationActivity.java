package com.belspec.unexploited.app.ui.evacuation;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.AnimationDrawable;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;

import com.belspec.unexploited.app.R;
import com.belspec.unexploited.app.utils.Utils;

import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;


public class EvacuationActivity extends AppCompatActivity implements View.OnClickListener, EvacuationContract.View{
    @BindView(R.id.btnEvacuationAddImage) Button btnAddImage;
    @BindView(R.id.btnCreateEvacuation) Button btnCreateEvacuation;
    @BindView(R.id.txvEvacuationManufacture) TextView txvEvacuationManufacture;
    @BindView(R.id.txvEvacuationModel) TextView txvEvacuationModel;
    @BindView(R.id.txvEvacuationDocID) TextView txvEvacuationDocId;
    @BindView(R.id.txvEvacuationCarID) TextView txvEvacuationCarId;
    @BindView(R.id.txvEvacuationDateDetection) TextView txvEvacuationDateDetection;
    @BindView(R.id.txvEvacuationContractor) TextView txvEvacuationContractor;
    @BindView(R.id.imvAvatar) ImageView imvAvatar;
    @BindView(R.id.rbNoCarId) RadioButton rbNoCarId;
    @BindView(R.id.rbNoAction) RadioButton rbNoAction;
    @BindView(R.id.rbNoOwner) RadioButton rbNoOwner;
    @BindView(R.id.rvEvacuationImageList) RecyclerView rvImageFromBase;
    @BindView(R.id.spnParking) Spinner spnParking;
    @BindView(R.id.svAll) ScrollView svAll;
    @BindView(R.id.imvLoading) ImageView imvLoading;
    @BindView(R.id.toolbar) Toolbar toolbar;
    EvacuationContract.Presenter presenter;
    LinearLayoutManager llm;
    final int REQUEST_CODE_PHOTO = 1;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.evacuation_activity);
        ButterKnife.bind(this);
        initViews();
        initComponents();
        presenter = new EvacuationPresenter(this);
        presenter.onCreate(savedInstanceState, getIntent());
    }

    private void initViews(){
        setSupportActionBar(toolbar);
        if(getSupportActionBar()!= null)
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    }

    private void initComponents(){
        btnAddImage.setOnClickListener(this);
        btnCreateEvacuation.setOnClickListener(this);
        llm = new LinearLayoutManager(this);
        llm.setOrientation(LinearLayoutManager.HORIZONTAL);
        rvImageFromBase.setLayoutManager(llm);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            finish();
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        presenter.onSaveInstanceState(outState);
        super.onSaveInstanceState(outState);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.btnEvacuationAddImage:
                presenter.onAddPhotoClick();
                break;
            case R.id.btnCreateEvacuation:
                presenter.onCreateEvacuationClick();
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                presenter.onAddPhoto();
            }else if (resultCode == Activity.RESULT_CANCELED) {
                presenter.onAddPhotoCancel();
            }
        }
    }

    @Override
    public void setLoading(boolean bool) {
        AnimationDrawable animation = (AnimationDrawable)imvLoading.getBackground();
        if (bool) {
            svAll.setVisibility(View.GONE);
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
        } else {
            svAll.setVisibility(View.VISIBLE);
            imvLoading.setVisibility(View.GONE);
            animation.stop();
        }
    }

    @Override
    public void setManufacture(String manufacture) {
        txvEvacuationManufacture.setText(manufacture);
    }

    @Override
    public void setModel(String model) {
        txvEvacuationModel.setText(model);
    }

    @Override
    public void setDocId(String docId) {
        txvEvacuationDocId.setText(docId);
    }

    @Override
    public void setCarId(String carId) {
        txvEvacuationCarId.setText(carId);
    }

    @Override
    public void setDateDetection(String dateDetection) {
        txvEvacuationDateDetection.setText(dateDetection);
    }

    @Override
    public void setContractor(String contractor) {
        txvEvacuationContractor.setText(contractor);
    }

    @Override
    public void setAvatar(Bitmap bitmap) {
        imvAvatar.setImageBitmap(bitmap);
    }

    @Override
    public Context getViewContext() {
        return getApplication();
    }

    @Override
    public void setAdapter(RecyclerView.Adapter adapter) {
        rvImageFromBase.setAdapter(adapter);
    }

    @Override
    public void setNoAction(boolean bool) {
        rbNoAction.setChecked(bool);
    }

    @Override
    public void setParkings(List<String> parkings) {
        spnParking.setAdapter(new ArrayAdapter<>(this, R.layout.spinner_item, parkings));
    }

    @Override
    public void setParkingItemSelection(int position) {
        spnParking.setSelection(position);
    }

    @Override
    public int getParkingSelectedPosition() {
        return spnParking.getSelectedItemPosition();
    }

    @Override
    public String getParkingSelectedItem() {
        return spnParking.getSelectedItem().toString();
    }

    @Override
    public void getPhoto(Intent intent) {
        startActivityForResult(intent, REQUEST_CODE_PHOTO);
    }

    @Override
    public boolean getNoAction() {
        return rbNoAction.isChecked();
    }

    @Override
    public boolean getNoOwner() {
        return rbNoOwner.isChecked();
    }

    @Override
    public boolean getNoCarId() {
        return rbNoCarId.isChecked();
    }

    @Override
    public void showMessage(String message) {
        Utils.showMessage(this, message);
    }
}
