package com.belspec.unexploited.app.ui.control.find_all;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import com.belspec.unexploited.app.adapters.DetectionDocListAdapter;
import com.belspec.unexploited.app.interfaces.NetworkDataUpdate;
import com.belspec.unexploited.app.retrofit.Api;
import com.belspec.unexploited.app.retrofit.RetrofitService;
import com.belspec.unexploited.app.retrofit.model.DetectionDoc;
import com.belspec.unexploited.app.retrofit.model.getDetectionList.request.GetDetectionListRequestEnvelope;
import com.belspec.unexploited.app.retrofit.model.getDetectionList.response.GetDetectionListResponseEnvelope;
import com.belspec.unexploited.app.ui.editDoc.EditDocActivity;
import com.belspec.unexploited.app.utils.Encode;
import com.belspec.unexploited.app.utils.NetworkDataManager;
import com.belspec.unexploited.app.utils.UserManager;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

class FindAllPresenter implements FindAllContract.Presenter, NetworkDataUpdate{
    private FindAllContract.View view;
    private int currentPage;
    private Context context;
    private boolean dataLoading;
    private boolean endList;
    private DetectionDocListAdapter detectionDocListAdapter;

    FindAllPresenter(FindAllContract.View view){
        this.view = view;
        this.context = view.getViewContext();
        currentPage = 1;
        dataLoading = false;
        endList = false;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        if (savedInstanceState == null){
            view.setLoading(true);
            currentPage = 1;
            detectionDocListAdapter = new DetectionDocListAdapter();
            view.setAdapter(detectionDocListAdapter);
            NetworkDataManager networkDataManager = NetworkDataManager.getInstance();
            NetworkDataManager.getInstance().setNetworkDataUpdate(this);
            networkDataManager.getDefaultData();
        }else{
            view.setLoading(false);
            currentPage = savedInstanceState.getInt("currentPage");
            ArrayList<DetectionDoc> detectionDocs = savedInstanceState.getParcelableArrayList("docList");
            detectionDocListAdapter = new DetectionDocListAdapter(detectionDocs);
            view.setAdapter(detectionDocListAdapter);
        }
    }

    @Override
    public void onStop() {
        NetworkDataManager.getInstance().unsetNetworkDataUpdate(this);
    }

    @Override
    public void onLoadMore() {
        if(!endList && !dataLoading)
            loadMoreDataFromServer();
    }

    @Override
    public void onFindClick() {
        detectionDocListAdapter.clear();
        view.setLoading(true);
        currentPage = 1;
        endList = false;
        loadMoreDataFromServer();
    }

    @Override
    public void onSavedInstanceState(Bundle outState) {
        outState.putInt("currentPage",currentPage);
        try{
            outState.putParcelableArrayList("docList", detectionDocListAdapter.getDetectionDocList());
        }catch (Exception e){
            outState.putParcelableArrayList("docList", null);
        }
    }

    @Override
    public void onItemClick(int position) {
        Intent intent = new Intent(context, EditDocActivity.class);
        intent.putExtra(DetectionDoc.class.getCanonicalName(), detectionDocListAdapter.getItem(position));
        view.startInformationActivity(intent);
    }

    private void loadMoreDataFromServer(){
        dataLoading = true;
        RetrofitService retrofitService = Api.createRetrofitService();
        retrofitService.executeGetDetectionList(Encode.getBasicAuthTemplate(
                UserManager.getInstanse().getmLogin(),
                UserManager.getInstanse().getmPassword()
        ), new GetDetectionListRequestEnvelope(
                view.getManufacture(),
                view.getContractor(),
                view.getCarId(),
                "",
                currentPage, view.getStatus()
        )).enqueue(new Callback<GetDetectionListResponseEnvelope>() {
            @Override
            public void onResponse(Call<GetDetectionListResponseEnvelope> call, Response<GetDetectionListResponseEnvelope> response) {
                dataLoading = false;
                view.setLoading(false);
                if(response.isSuccessful()){
                    currentPage++;
                    GetDetectionListResponseEnvelope responseEnvelope = response.body();
                    List<DetectionDoc> detectionDocs = responseEnvelope.getDetectionList();
                    if (detectionDocs!=null) {
                        detectionDocListAdapter.addDetectionList(detectionDocs);
                    }else{
                        view.showMessage("Достигнут конец списка");
                        endList = true;
                    }
                }else{
                   view.showMessage("Ошибка сервера " + response.code()+ " " + response.message());
                }
            }

            @Override
            public void onFailure(Call<GetDetectionListResponseEnvelope> call, Throwable t) {
                dataLoading = false;
                view.setLoading(false);
                view.showMessage("Ошибка " + t.getMessage());
            }
        });

    }

    @Override
    public void onNetworkDataUpdate(NetworkDataManager netDataManager) {
        view.setLoading(false);
        view.setContractors(netDataManager.getContractorListAsString());
        view.setManufactures(netDataManager.getManufactureListAsString());
    }
}
