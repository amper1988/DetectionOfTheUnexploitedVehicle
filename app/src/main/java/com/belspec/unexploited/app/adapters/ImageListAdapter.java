package com.belspec.unexploited.app.adapters;

import android.graphics.Bitmap;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

import com.belspec.unexploited.app.R;

import java.io.File;
import java.util.ArrayList;
import java.util.List;


public class ImageListAdapter extends RecyclerView.Adapter<ImageListAdapter.ImageViewHolder> implements Parcelable {
    private List<BitmapIdHolder> ivList;
    private List<String> filePathList;
    private String mCurrentPath;
    private ImageClickListener clickListener;

    public ImageListAdapter() {
        ivList = new ArrayList<>();
        filePathList = new ArrayList<>();
    }

    private ImageListAdapter(Parcel in) {
        ivList = in.createTypedArrayList(BitmapIdHolder.CREATOR);
        filePathList = in.createStringArrayList();
        mCurrentPath = in.readString();
    }

    public static final Creator<ImageListAdapter> CREATOR = new Creator<ImageListAdapter>() {
        @Override
        public ImageListAdapter createFromParcel(Parcel in) {
            return new ImageListAdapter(in);
        }

        @Override
        public ImageListAdapter[] newArray(int size) {
            return new ImageListAdapter[size];
        }
    };

    public String getFilePath(int pos) {
        if (filePathList != null) {
            return filePathList.get(pos);
        } else {
            return null;
        }
    }

    public void addFilePath(String path) {
        mCurrentPath = path;
        filePathList.add(path);
    }

    public List<String> getFilePathList() {
        return filePathList;
    }

    public void setFilePathList(List<String> paths) {
        filePathList = paths;
    }

    public String getCurrentPath() {
        return mCurrentPath;
    }

    public void setCurrentPath(String path) {
        mCurrentPath = path;
        filePathList.add(path);
    }

    public void deleteCurrentPath() {
        if (mCurrentPath != null) {
            for (int i = 0; i < filePathList.size(); i++) {
                if (filePathList.get(i) == mCurrentPath) {
                    File file = new File(filePathList.get(i));
                    if (file.exists()) {
                        file.delete();
                    }
                    filePathList.remove(i);
                }
            }
            mCurrentPath = null;
        }
    }

    public void add(Bitmap bitmap) {
        ivList.add(new BitmapIdHolder(bitmap, ""));
        notifyDataSetChanged();
    }

    public void addBitmapWithId(Bitmap bitmap, String id) {
        ivList.add(new BitmapIdHolder(bitmap, id));
        notifyDataSetChanged();
    }


    public void clear() {
        ivList.clear();
        for (int i = 0; i < filePathList.size(); i++) {
            File file = new File(filePathList.get(i));
            if (file.exists()) {
                file.delete();
            }
        }
        filePathList.clear();
        notifyDataSetChanged();
    }

    public void setImageClickListener(ImageClickListener listener) {
        this.clickListener = listener;
    }

    @Override
    public ImageViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.foto_item, parent, false);
        return new ImageViewHolder(v);
    }

    @Override
    public void onBindViewHolder(final ImageViewHolder holder, int position) {
        holder.iv.setImageBitmap(ivList.get(position).getImage());
        holder.iv.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (clickListener != null) {
                    clickListener.onImageClick(ivList.get(holder.getAdapterPosition()).getId());
                }
            }
        });
    }

    @Override
    public int getItemCount() {
        return ivList.size();
    }

    public int getFilePathCount() {
        return filePathList.size();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeTypedList(ivList);
        parcel.writeStringList(filePathList);
        parcel.writeString(mCurrentPath);
    }

    public interface ImageClickListener {
        void onImageClick(String id);
    }

    static class ImageViewHolder extends RecyclerView.ViewHolder {
        ImageView iv;

        ImageViewHolder(View itemView) {
            super(itemView);
            iv = (ImageView) itemView.findViewById(R.id.imvImage);
        }
    }


}
