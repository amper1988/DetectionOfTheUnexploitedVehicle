package com.belspec.unexploited.app.ui;

import android.content.Context;
import android.content.Intent;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.AnimationDrawable;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.Toast;

import com.belspec.unexploited.app.R;
import com.belspec.unexploited.app.retrofit.Api;
import com.belspec.unexploited.app.retrofit.RetrofitService;
import com.belspec.unexploited.app.retrofit.model.getImage.request.GetImageRequestEnvelope;
import com.belspec.unexploited.app.retrofit.model.getImage.response.GetImageResponseEnvelope;
import com.belspec.unexploited.app.utils.Converter;
import com.belspec.unexploited.app.utils.Encode;
import com.belspec.unexploited.app.utils.UserManager;
import com.belspec.unexploited.app.utils.Utils;

import java.io.IOException;
import java.io.InputStream;

import butterknife.BindView;
import butterknife.ButterKnife;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import uk.co.senab.photoview.PhotoViewAttacher;

public class ImageActivity extends AppCompatActivity {

    private static String INTENT_KEY_ID = "intent_key_id";
    @BindView(R.id.imvImage)
    ImageView imageView;
    @BindView(R.id.toolbar)
    Toolbar toolbar;
    @BindView(R.id.imvLoading)
    ImageView imvLoading;

    private String longitude;
    private String latitude;

    public static Intent getIntent(Context context, String id) {
        Intent intent = new Intent(context, ImageActivity.class);
        intent.putExtra(INTENT_KEY_ID, id);
        return intent;
    }

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_image);
        ButterKnife.bind(this);
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null)
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        String id = getIntent().getStringExtra(INTENT_KEY_ID);
        if (id != null && !id.isEmpty()) {
            loadImage(id);
        } else {
            loadEmptyImage();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.position_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            finish();
        }
        if (item.getItemId() == R.id.position) {
            if (latitude != null && longitude != null && !latitude.isEmpty() && !longitude.isEmpty()) {
                startActivity(MapsActivity.getIntent(this, latitude, longitude));
            } else {
                Toast.makeText(this, "Невозможно отобразить на карте", Toast.LENGTH_SHORT).show();
            }
        }
        return super.onOptionsItemSelected(item);
    }

    private void loadImage(String id) {
        setLoading(true);
        RetrofitService service = Api.createRetrofitService();
        service.executeGetImage(Encode.getBasicAuthTemplate(
                UserManager.getInstanse().getmLogin(),
                UserManager.getInstanse().getmPassword()
                ),
                new GetImageRequestEnvelope(id)).enqueue(new Callback<GetImageResponseEnvelope>() {
            @Override
            public void onResponse(Call<GetImageResponseEnvelope> call, Response<GetImageResponseEnvelope> response) {
                try {
                    latitude = response.body().getLatitude();
                    longitude = response.body().getLongitude();
                    imageView.setImageBitmap(Converter.getBitmapFromBase64Stirng(ImageActivity.this, response.body().getImage()));
                    PhotoViewAttacher pAttacher = new PhotoViewAttacher(imageView);
                    pAttacher.update();
                } catch (Exception e) {
                    showMessage("Произошла ошибка");
                    loadEmptyImage();
                }
                setLoading(false);
            }

            @Override
            public void onFailure(Call<GetImageResponseEnvelope> call, Throwable t) {
                showMessage("Не удалось загрузить фото");
                loadEmptyImage();
                setLoading(false);
            }
        });
    }

    private void showMessage(String message) {
        Utils.showMessage(ImageActivity.this, message);
    }

    private void loadEmptyImage() {
        AssetManager assetManager = this.getAssets();
        InputStream istr = null;
        try {
            istr = assetManager.open("emptyBackground.jpg");

        } catch (IOException e) {
            e.printStackTrace();
        }
        Bitmap bm = BitmapFactory.decodeStream(istr);
        imageView.setImageBitmap(bm);
        PhotoViewAttacher pAttacher = new PhotoViewAttacher(imageView);
        pAttacher.update();
    }

    public void setLoading(boolean bool) {
        AnimationDrawable animation = (AnimationDrawable) imvLoading.getBackground();
        if (bool) {
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
            imageView.setVisibility(View.GONE);
        } else {
            imvLoading.setVisibility(View.GONE);
            animation.stop();
            imageView.setVisibility(View.VISIBLE);

        }
    }
}
