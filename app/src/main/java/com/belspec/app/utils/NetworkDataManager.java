package com.belspec.app.utils;


import com.belspec.app.interfaces.NetworkDataUpdate;
import com.belspec.app.interfaces.ResponseListener;
import com.belspec.app.retrofit.Api;
import com.belspec.app.retrofit.RetrofitService;
import com.belspec.app.retrofit.model.Contractor;
import com.belspec.app.retrofit.model.Manufacture;
import com.belspec.app.retrofit.model.Model;
import com.belspec.app.retrofit.model.Parking;
import com.belspec.app.retrofit.model.PoliceDepartment;
import com.belspec.app.retrofit.model.takeDefaultData.request.GetDefaultDataRequestEnvelope;
import com.belspec.app.retrofit.model.takeDefaultData.response.GetDefaultDataResponseEnvelope;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class NetworkDataManager {
    public static NetworkDataManager instance;
    private List<Contractor> contractorList = new ArrayList<>();
    private List<PoliceDepartment> policeDepartmentList = new ArrayList<>();
    private List<Manufacture> manufactureList = new ArrayList<>();
    private List<Model> modelList = new ArrayList<>();
    private List<Parking> parkingList = new ArrayList<>();
    private List<NetworkDataUpdate> listeners = new ArrayList<>();

    public static synchronized NetworkDataManager getInstance() {
        if (instance == null) {
            instance = new NetworkDataManager();
        }
        return instance;
    }

    private NetworkDataManager() {
        super();
    }

    public void setNetworkDataUpdate(NetworkDataUpdate ndu) {
        if (!listeners.contains(ndu)) {
            listeners.add(ndu);
        }
    }

    public void unsetNetworkDataUpdate(NetworkDataUpdate ndu) {
        if (listeners.contains(ndu))
            listeners.remove(ndu);
    }

    public void getDefaultData() {
        RetrofitService retrofitService = Api.createRetrofitService();
        retrofitService.executeGetDefaultData(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetDefaultDataRequestEnvelope()
        ).enqueue(new Callback<GetDefaultDataResponseEnvelope>() {
            @Override
            public void onResponse(Call<GetDefaultDataResponseEnvelope> call, Response<GetDefaultDataResponseEnvelope> response) {
                if (response.isSuccessful()) {
                    GetDefaultDataResponseEnvelope responseEnvelope = response.body();
                    manufactureList = responseEnvelope.body().getManufactureList();
                    modelList = responseEnvelope.body().getModelList();
                    contractorList = responseEnvelope.body().getContractorList();
                    policeDepartmentList = responseEnvelope.body().getPoliceDepartmentList();
                    parkingList = responseEnvelope.body().getParkingList();
                    notifyDataUpdate();
                } else
                    notifyDataError();
            }

            @Override
            public void onFailure(Call<GetDefaultDataResponseEnvelope> call, Throwable t) {
                notifyDataError();
            }
        });
    }

    public ArrayList<String> getManufactureListAsString() {
        if (this.manufactureList != null) {
            ArrayList<String> stringList = new ArrayList<>();
            for (Manufacture manufacture : this.manufactureList) {
                stringList.add(manufacture.getName());
            }
            return stringList;
        } else
            return null;
    }

    public ArrayList<String> getModelListAsString() {
        if (this.modelList != null) {
            ArrayList<String> stringList = new ArrayList<>();
            for (Model model : this.modelList) {
                stringList.add(model.getName());
            }
            return stringList;
        } else
            return null;
    }

    public ArrayList<String> getContractorListAsString() {
        if (this.contractorList != null) {
            ArrayList<String> stringList = new ArrayList<>();
            for (Contractor contractor : this.contractorList) {
                stringList.add(contractor.getName());
            }
            return stringList;
        } else
            return null;
    }

    public ArrayList<String> getPoliceDepartmentListAsString() {
        if (this.policeDepartmentList != null) {
            ArrayList<String> stringList = new ArrayList<>();
            for (PoliceDepartment polDep : this.policeDepartmentList) {
                stringList.add(polDep.getName());
            }
            return stringList;
        } else
            return null;
    }

    public ArrayList<String> getParkingListAsString() {
        if (this.parkingList != null) {
            ArrayList<String> stringList = new ArrayList<>();
            for (Parking parking : this.parkingList) {
                stringList.add(parking.getName());
            }
            return stringList;
        } else
            return null;
    }


    private void notifyDataUpdate() {
        if (listeners != null) {
            for (NetworkDataUpdate item : listeners)
                item.onNetworkDataUpdate(this);
        }
    }

    private void notifyDataError(){

    }
}
