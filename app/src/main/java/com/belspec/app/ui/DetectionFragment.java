package com.belspec.app.ui;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.AnimationDrawable;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.v4.app.Fragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.belspec.app.R;
import com.belspec.app.adapters.ImageListAdapter;
import com.belspec.app.gps.GPSTracker;
import com.belspec.app.interfaces.MyCallback;
import com.belspec.app.interfaces.NetworkDataUpdate;
import com.belspec.app.interfaces.ResponseListener;
import com.belspec.app.retrofit.Api;
import com.belspec.app.retrofit.model.Image;
import com.belspec.app.retrofit.model.createDetection.request.CreateDetectionRequestEnvelope;
import com.belspec.app.retrofit.model.ImageList;
import com.belspec.app.retrofit.model.createDetection.response.CreateDetectionResponseEnvelope;
import com.belspec.app.retrofit.RetrofitService;
import com.belspec.app.utils.Converter;
import com.belspec.app.utils.Encode;
import com.belspec.app.utils.FileManager;
import com.belspec.app.utils.NetworkDataManager;
import com.belspec.app.utils.UserManager;
import com.belspec.app.utils.Utils;

import java.io.File;
import java.io.IOException;

import retrofit2.Response;


public class DetectionFragment extends Fragment implements View.OnClickListener, ResponseListener, TextView.OnEditorActionListener, NetworkDataUpdate, GPSTracker.LocationDataChangeListener{
    AutoCompleteTextView actvManufacture;
    AutoCompleteTextView actvModel;
    ScrollView svMain;
    Spinner spnContractor;
    Spinner spnPoliceDepartment;
    EditText edtVIN;
    EditText edtCarID;
    EditText edtColor;
    EditText edtStreet;
    RadioButton rbCarTypeStrong;
    RadioButton rbCarTypeLight;
    Button btnRegistrate;
    RecyclerView rvImageList;
    Button btnAddImage;
    View mView;
    ImageListAdapter imageListAdapter;
    ImageView imvLoading;
    int contractorPos;
    int polDepPos;
    NetworkDataManager networkDataManager;
    String adress;

    GPSTracker gpsTracker;
    final int REQUEST_CODE_PHOTO = 1;

    @Override
    public View onCreateView(LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.detection_fragment, container, false);
        gpsTracker = new GPSTracker(getActivity());

        initViews(savedInstanceState);
        return  mView;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putString("adress", adress);
        outState.putInt("itemPolPosition", polDepPos);
        outState.putInt("itemContractorPosition",  contractorPos);
        outState.putParcelable("imageListAdapter", imageListAdapter);
    }

    @Override
    public void onResume() {
        super.onResume();
        gpsTracker.setDataChangeListener(this);
        if(gpsTracker.canGetLocation()){
            gpsTracker.startUsingGPS();
        }else{
            gpsTracker.showSettingsAlert();
        }

    }

    @Override
    public void onPause() {
        super.onPause();
        gpsTracker.unsetDataChangeListener(this);
        gpsTracker.stopUsingGPS();
    }

    private void initViews(Bundle savedInstanceState){
        actvManufacture = (AutoCompleteTextView) mView.findViewById(R.id.actvManufacture);
        actvModel = (AutoCompleteTextView) mView.findViewById(R.id.actvModel);
        spnContractor = (Spinner) mView.findViewById(R.id.spnContractor);
        spnPoliceDepartment = (Spinner) mView.findViewById(R.id.spnPoliceDepartment);
        btnRegistrate = (Button)mView.findViewById(R.id.btnRegister);
        edtCarID = (EditText)mView.findViewById(R.id.edtCarID);
        edtVIN = (EditText)mView.findViewById(R.id.edtVIN);
        edtStreet = (EditText)mView.findViewById(R.id.edtStreet);
        rbCarTypeLight = (RadioButton)mView.findViewById(R.id.rbCarTypeLight);
        rbCarTypeStrong = (RadioButton)mView.findViewById(R.id.rbCarTypeStrong);
        edtColor = (EditText)mView.findViewById(R.id.edtColor);
        rvImageList = (RecyclerView)mView.findViewById(R.id.rvImageList);
        btnAddImage = (Button)mView.findViewById(R.id.btnAddImage);
        svMain = (ScrollView)mView.findViewById(R.id.svDetection);
        imvLoading = (ImageView)mView.findViewById(R.id.imvLoading);
        imvLoading.setBackgroundResource(R.drawable.pb_loading);
        actvManufacture.setOnEditorActionListener(this);
        actvManufacture.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        actvModel.setOnEditorActionListener(this);
        actvModel.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtCarID.setOnEditorActionListener(this);
        edtCarID.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtVIN.setOnEditorActionListener(this);
        edtVIN.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtStreet.setOnEditorActionListener(this);
        edtStreet.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        edtColor.setOnEditorActionListener(this);
        edtColor.setImeActionLabel("Next", EditorInfo.IME_ACTION_NEXT);
        setLoading(true);
        if (savedInstanceState == null){
            setLoading(true);
            imageListAdapter = new ImageListAdapter();
            actvModel.setText("");
            actvManufacture.setText("");
            edtColor.setText("");
            edtVIN.setText("");
            edtStreet.setText(Utils.getAdress(getActivity(), gpsTracker.getLatitude(), gpsTracker.getLongitude()));
            edtCarID.setText("");
            contractorPos = 0;
            polDepPos = 0;
        } else{
            edtStreet.setText(savedInstanceState.getString("adress"));
            contractorPos = savedInstanceState.getInt("itemContractorPosition");
            polDepPos = savedInstanceState.getInt("itemPolPosition");
            imageListAdapter = savedInstanceState.getParcelable("imageListAdapter");
        }
        networkDataManager = new NetworkDataManager(this);
        networkDataManager.getDefaultData();
        LinearLayoutManager llm = new LinearLayoutManager(getActivity());
        llm.setOrientation(LinearLayoutManager.HORIZONTAL);
        rvImageList.setLayoutManager(llm);
        rvImageList.setAdapter(imageListAdapter);
        btnAddImage.setOnClickListener(this);
        btnRegistrate.setOnClickListener(this);
    }


    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case (R.id.btnRegister):
                setLoading(true);
                Utils.hideKeyboard(getActivity());
                RetrofitService createDataRetrofit = Api.createRetrofitService();
                MyCallback<CreateDetectionResponseEnvelope> createDataCall = new MyCallback<>();
                createDataCall.addResponseListener(this);

                ImageList imageList =  new ImageList();
                int count = imageListAdapter.getItemCount();
                if (count>0){
                    for (int i = 0; i < count; i++){
                        imageList.addImage(new Image().setData(Converter.encodeToBase64(imageListAdapter.getFilePath(i))));
                    }
                }else{
                    imageList.addImage(new Image().setData(""));
                }

                createDataRetrofit.executeCreateDetection(
                        Encode.getBasicAuthTemplate(
                                UserManager.getInstanse().getmLogin(),
                                UserManager.getInstanse().getmPassword()
                        ),
                        new CreateDetectionRequestEnvelope(
                                actvManufacture.getText().toString(),
                                actvModel.getText().toString(),
                                spnContractor.getSelectedItem().toString(),
                                spnPoliceDepartment.getSelectedItem().toString(),
                                ((rbCarTypeLight.isChecked())?"1":"2"),
                                 edtCarID.getText().toString(),
                                edtStreet.getText().toString(),
                                edtVIN.getText().toString(),
                                edtColor.getText().toString(),
                                imageList
                        )
                ).enqueue(createDataCall);

                break;
            case (R.id.btnAddImage):
                Utils.hideKeyboard(getActivity());
                edtStreet.setText(Utils.getAdress(getActivity(), gpsTracker.getLatitude(), gpsTracker.getLongitude()));
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (intent.resolveActivity(getActivity().getPackageManager()) != null) {
                    File photoFile = null;
                    try {
                        photoFile = FileManager.createImageFile(getActivity());
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }

                    if (photoFile != null) {
                       imageListAdapter.addFilePath(photoFile.getAbsolutePath());
                        Uri photoURI = Uri.fromFile(photoFile);
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                        startActivityForResult(intent, REQUEST_CODE_PHOTO);
                    }
                }

                break;
        }

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                GPSTracker gps = new GPSTracker(getActivity());
                Converter.compressImage(imageListAdapter.getCurrentPath(), Bitmap.CompressFormat.JPEG,80, 1024);
                if (gps.setGpsToFile(imageListAdapter.getCurrentPath())) {
                    BitmapFactory.Options opt = new BitmapFactory.Options();
                    opt.inSampleSize = 8;
                    Bitmap bitmap = BitmapFactory.decodeFile(imageListAdapter.getCurrentPath(), opt);
                    imageListAdapter.add(bitmap);
                }else{
                    imageListAdapter.deleteCurrentPath();
                }
            }else if (resultCode == Activity.RESULT_CANCELED) {
                imageListAdapter.deleteCurrentPath();
            }
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if(response.body().getClass() == CreateDetectionResponseEnvelope.class){
            CreateDetectionResponseEnvelope responseEnvelope = (CreateDetectionResponseEnvelope) response.body();
            setLoading(false);
            Utils.showMessage(getContext(), "Зарегистрирован под номером: " + responseEnvelope.getDocId());
            clear();
        }
    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this.getActivity(), "Wrong authorization. Response code: " + response.code()+ " " + response.message(), Toast.LENGTH_SHORT).show();
        setLoading(false);
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this.getActivity(), "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        setLoading(false);
    }

    private void clear(){
        imageListAdapter.clear();
        initViews(null);
    }

    private void setLoading(Boolean bool) {
        AnimationDrawable animation = (AnimationDrawable) imvLoading.getBackground();
        if(bool){
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
            svMain.setVisibility(View.GONE);
        }else{
            imvLoading.setVisibility(View.GONE);
            animation.stop();
            svMain.setVisibility(View.VISIBLE);

        }
    }

    @Override
    public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
        if (actionId == EditorInfo.IME_ACTION_NEXT) {
            int id = textView.getId();
            switch (id){
                case R.id.actvManufacture:
                    actvModel.requestFocus();
                    return true;
                case R.id.actvModel:
                    edtCarID.requestFocus();
                    return true;
                case R.id.edtCarID:
                    edtStreet.requestFocus();
                    return true;
                case R.id.edtStreet:
                    edtColor.requestFocus();
                    return true;
                case R.id.edtColor:
                    edtVIN.requestFocus();
                    return true;
                case R.id.edtVIN:
                    spnContractor.requestFocus();
                    return true;
            }
        }
        return false;
    }

    @Override
    public void onNetworkDataUpdate(NetworkDataManager netDataManager) {
        if (netDataManager != null){
            ArrayAdapter<String> arrayAdapterManufacture  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, netDataManager.getManufactureListAsString());
            actvManufacture.setAdapter(arrayAdapterManufacture);
            ArrayAdapter<String> arrayAdapterModel  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, netDataManager.getModelListAsString());
            actvModel.setAdapter(arrayAdapterModel);
            ArrayAdapter<String> arrayAdapterContractor  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, netDataManager.getContractorListAsString());
            spnContractor.setAdapter(arrayAdapterContractor);
            spnContractor.setSelection(contractorPos);
            spnContractor.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                @Override
                public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                    contractorPos = adapterView.getSelectedItemPosition();
                }

                @Override
                public void onNothingSelected(AdapterView<?> adapterView) {
                    contractorPos = 0;
                }
            });
            ArrayAdapter<String> arrayAdapterPoliceDepartments  = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, netDataManager.getPoliceDepartmentListAsString() );
            spnPoliceDepartment.setAdapter(arrayAdapterPoliceDepartments);
            spnPoliceDepartment.setSelection(polDepPos);
            spnPoliceDepartment.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                @Override
                public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                    polDepPos = adapterView.getSelectedItemPosition();
                }

                @Override
                public void onNothingSelected(AdapterView<?> adapterView) {
                    polDepPos = 0;
                }
            });
            setLoading(false);
        }else
            networkDataManager = new NetworkDataManager(this);
    }

    @Override
    public void onDataChange(String actionType, Location location) {
        switch (actionType){
            case GPSTracker.LOCATION_CHANGED:
                edtStreet.setText(Utils.getAdress(getActivity(), location.getLatitude(), location.getLongitude()));
                break;
        }
    }
}
