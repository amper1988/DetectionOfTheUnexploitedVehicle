package com.belspec.app.ui.control.detection;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.net.Uri;

import com.belspec.app.adapters.ImageListAdapter;
import com.belspec.app.gps.GPSTracker;
import com.belspec.app.interfaces.NetworkDataUpdate;
import com.belspec.app.retrofit.Api;
import com.belspec.app.retrofit.model.Image;
import com.belspec.app.retrofit.model.ImageList;
import com.belspec.app.retrofit.model.createDetection.request.CreateDetectionRequestEnvelope;
import com.belspec.app.retrofit.model.createDetection.response.CreateDetectionResponseEnvelope;
import com.belspec.app.utils.AppHolder;
import com.belspec.app.utils.Converter;
import com.belspec.app.utils.Encode;
import com.belspec.app.utils.FileManager;
import com.belspec.app.utils.NetworkDataManager;
import com.belspec.app.utils.UserManager;
import com.belspec.app.utils.Utils;

import java.io.File;
import java.io.IOException;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

class DetectionPresenter implements DetectionContract.Presenter, GPSTracker.LocationDataChangeListener, NetworkDataUpdate{
    private DetectionContract.View view;
    private GPSTracker gpsTracker;
    private ImageListAdapter imageListAdapter;

    DetectionPresenter(DetectionContract.View view){
        this.view = view;
        gpsTracker = GPSTracker.getInstance();
        imageListAdapter = new ImageListAdapter();

    }

    @Override
    public void onCreate() {
        view.setLoading(true);
        view.setAdapter(imageListAdapter);
        NetworkDataManager.getInstance().getDefaultData();
        gpsTracker.setDataChangeListener(this);
        if(gpsTracker.canGetLocation()){
            gpsTracker.startUsingGPS();
        }else{
            gpsTracker.showSettingsAlert();
        }
        NetworkDataManager.getInstance().setNetworkDataUpdate(this);
    }

    @Override
    public void onDestroy() {
        gpsTracker.unsetDataChangeListener(this);
        NetworkDataManager.getInstance().unsetNetworkDataUpdate(this);
    }

    @Override
    public void onRegister() {
        view.setLoading(true);
        ImageList imageList =  new ImageList();
        int count = imageListAdapter.getItemCount();
        if (count>0){
            for (int i = 0; i < count; i++){
                imageList.addImage(new Image().setData(Converter.encodeToBase64(imageListAdapter.getFilePath(i))));
            }
        }else{
            imageList.addImage(new Image().setData(""));
        }
        Api.createRetrofitService().executeCreateDetection(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new CreateDetectionRequestEnvelope(
                        view.getManufacture(),
                        view.getModel(),
                        view.getContractor(),
                        view.getPoliceDepartment(),
                        getEvacuationType(),
                        view.getCarId(),
                        view.getStreet(),
                        view.getVin(),
                        view.getColor(),
                        imageList
                )
        ).enqueue(new Callback<CreateDetectionResponseEnvelope>() {
            @Override
            public void onResponse(Call<CreateDetectionResponseEnvelope> call, Response<CreateDetectionResponseEnvelope> response) {
                view.setLoading(false);
                if(response.isSuccessful()){
                    view.showDialogMessage("Зарегистрирован под номером: " + response.body().getDocId());
                    clear();
                }else
                    view.showDialogMessage("Ошибка сервера " + response.code()+ ": " + response.message());

            }

            @Override
            public void onFailure(Call<CreateDetectionResponseEnvelope> call, Throwable t) {
                view.setLoading(false);
                view.showDialogMessage("Ошибка: " + t.getMessage());
            }
        });
    }

    private String getEvacuationType(){
        if(view.isTypeLight()){
            return "1";
        }else if(view.isTypeStrong()){
            return "2";
        }
        return "0";
    }

    private void clear(){
        imageListAdapter.clear();
        view.setManufacture("");
        view.setModel("");
        view.setCarId("");
        view.setColor("");
        view.setPoliceDepartment("");
        view.setContractor("");
        view.setStreet("");
        view.setVin("");
    }
    @Override
    public Uri beforeAddImage() {
        File photoFile = null;
        try {
            photoFile = FileManager.createImageFile(AppHolder.getInstance().getContext());
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        if (photoFile != null) {
            imageListAdapter.addFilePath(photoFile.getAbsolutePath());
            return Uri.fromFile(photoFile);
        }
        return null;
    }

    @Override
    public void onAddImage() {
        Converter.compressImage(imageListAdapter.getCurrentPath(), Bitmap.CompressFormat.JPEG,80, 1024);
        if (gpsTracker.setGpsToFile(imageListAdapter.getCurrentPath())) {
            BitmapFactory.Options opt = new BitmapFactory.Options();
            opt.inSampleSize = 8;
            Bitmap bitmap = BitmapFactory.decodeFile(imageListAdapter.getCurrentPath(), opt);
            imageListAdapter.add(bitmap);
        }else{
            imageListAdapter.deleteCurrentPath();
        }
    }

    @Override
    public void onAddImageCancel() {
        imageListAdapter.deleteCurrentPath();
    }

    @Override
    public void getStreet() {
        view.setStreet(Utils.getAdress(AppHolder.getInstance().getContext(), gpsTracker.getLatitude(), gpsTracker.getLongitude()));
    }

    @Override
    public void onLocationDataChange(String locationAction, Location location) {
        switch (locationAction){
            case GPSTracker.LOCATION_CHANGED:
                break;
            case GPSTracker.PROVIDER_DISABLED:
                gpsTracker.showSettingsAlert();
                break;
            case GPSTracker.PROVIDER_ENABLED:
                break;
        }
    }

    @Override
    public void onNetworkDataUpdate(NetworkDataManager netDataManager) {
        view.setLoading(false);
        view.setManufacturesList(netDataManager.getManufactureListAsString());
        view.setModelList(netDataManager.getModelListAsString());
        view.setPoliceDepartmentList(netDataManager.getPoliceDepartmentListAsString());
        view.setContractorList(netDataManager.getContractorListAsString());
    }
}
