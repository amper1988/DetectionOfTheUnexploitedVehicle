package com.belspec.app.ui;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.AnimationDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.annotation.Nullable;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;

import com.belspec.app.R;
import com.belspec.app.adapters.ImageListAdapter;
import com.belspec.app.gps.GPSTracker;
import com.belspec.app.interfaces.MyCallback;
import com.belspec.app.interfaces.ResponseListener;
import com.belspec.app.retrofit.Api;
import com.belspec.app.retrofit.model.addPhoto.request.AddPhotoRequestEnvelope;
import com.belspec.app.retrofit.model.addPhoto.response.AddPhotoResponseEnvelope;
import com.belspec.app.retrofit.model.DetectionDoc;
import com.belspec.app.retrofit.model.getItemImage.request.GetItemImageRequestEnvelope;
import com.belspec.app.retrofit.model.getItemImage.response.GetItemImageResponseEnvelope;
import com.belspec.app.retrofit.model.Image;
import com.belspec.app.retrofit.model.ImageList;
import com.belspec.app.retrofit.RetrofitService;
import com.belspec.app.utils.Converter;
import com.belspec.app.utils.Encode;
import com.belspec.app.utils.FileManager;
import com.belspec.app.utils.UserManager;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import retrofit2.Response;


public class EditDocActivity extends AppCompatActivity implements View.OnClickListener, ResponseListener{
    Button btnAddImage;
    Button btnSave;
    TextView txvEvacuationManufacture;
    TextView txvEvacuationModel;
    TextView txvEvacuationDocId;
    TextView txvEvacuationCarId;
    TextView txvEvacuationDateDetection;
    TextView txvEvacuationContractor;
    TextView txvStatus;
    ImageView imvAvatar;
    ImageListAdapter imageListAdapter;
    RecyclerView rvImageFromBase;
    LinearLayoutManager llm;
    DetectionDoc detectionDoc;
    TextView txvParking;
    ArrayList<String> stringArrayParkingList;
    int curItem;
    ScrollView svAll;
    ImageView imvLoading;
    Toolbar toolbar;
    final int REQUEST_CODE_PHOTO = 1;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d("DEBUG", "onCreate EditDocActivity");
        setContentView(R.layout.edit_doc_activity);
        initViews();
        initComponents(savedInstanceState);
    }

    private void initViews(){
        Log.d("DEBUG", "initViews() EditDocActivity");
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        btnAddImage = (Button)findViewById(R.id.btnEvacuationAddImage);
        btnSave = (Button)findViewById(R.id.btnSave);
        txvEvacuationManufacture = (TextView)findViewById(R.id.txvEvacuationManufacture);
        txvEvacuationModel = (TextView)findViewById(R.id.txvEvacuationModel);
        txvEvacuationDocId = (TextView)findViewById(R.id.txvEvacuationDocID);
        txvEvacuationCarId = (TextView)findViewById(R.id.txvEvacuationCarID);
        txvEvacuationDateDetection = (TextView)findViewById(R.id.txvEvacuationDateDetection);
        txvEvacuationContractor = (TextView)findViewById(R.id.txvEvacuationContractor);
        txvStatus = (TextView)findViewById(R.id.txvStatus);
        imvAvatar = (ImageView)findViewById(R.id.imvAvatar);
        rvImageFromBase = (RecyclerView)findViewById(R.id.rvEvacuationImageList);
        txvParking = (TextView)findViewById(R.id.txvParking);
        svAll = (ScrollView)findViewById(R.id.svAll);
        imvLoading = (ImageView) findViewById(R.id.imvLoading);
        imvLoading.setBackgroundResource(R.drawable.pb_loading);
    }

    private void initComponents(Bundle bndl){
        Log.d("DEBUG", "initComponents(common) EditDocActivity");
        btnAddImage.setOnClickListener(this);
        btnSave.setOnClickListener(this);
        detectionDoc = getIntent().getParcelableExtra(DetectionDoc.class.getCanonicalName());
        txvEvacuationManufacture.setText(detectionDoc.getManufacture());
        txvEvacuationModel.setText(detectionDoc.getModel());
        txvEvacuationDocId.setText(detectionDoc.getId());
        txvEvacuationCarId.setText(detectionDoc.getCarId());
        SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
        txvEvacuationDateDetection.setText(df.format(detectionDoc.getDateDetection()));
        txvEvacuationContractor.setText(detectionDoc.getContractor());
        txvStatus.setText(detectionDoc.getStatus());
        txvParking.setText(detectionDoc.getParking());
        imvAvatar.setImageBitmap(Converter.getBitmapFromBase64Stirng(this, detectionDoc.getImage()));
        llm = new LinearLayoutManager(this);
        llm.setOrientation(LinearLayoutManager.HORIZONTAL);

        if (bndl == null){
            Log.d("DEBUG", "initComponents(null) EditDocActivity");
            setLoading(true);
            imageListAdapter = new ImageListAdapter();
            rvImageFromBase.setAdapter(imageListAdapter);
            rvImageFromBase.setLayoutManager(llm);
            curItem = 1;
            getImageFromApi(detectionDoc.getId(), curItem);
        }else{
            Log.d("DEBUG", "initCompontnts(bundl) EditDocActivity");
            setLoading(false);
            imageListAdapter = bndl.getParcelable("imageListAdapter");
            rvImageFromBase.setAdapter(imageListAdapter);
            imageListAdapter.notifyDataSetChanged();
            rvImageFromBase.setLayoutManager(llm);
            stringArrayParkingList = bndl.getStringArrayList("parkingList");
            txvParking.setText(bndl.getString("itemParking"));
        }


    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            finish();
        }
        return super.onOptionsItemSelected(item);
    }
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        Log.d("DEBUG", "onSaveInstanceState() EditDocActivity");
        outState.putStringArrayList("parkingList", stringArrayParkingList);
        outState.putString("itemParking", txvParking.getText().toString());
        outState.putParcelable("imageListAdapter", imageListAdapter);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.btnEvacuationAddImage:
                Log.d("DEBUG", "onClick(btnEvacuationAddImage) EditDocActivity");
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (intent.resolveActivity(getPackageManager()) != null) {
                    File photoFile = null;
                    try {
                        photoFile = FileManager.createImageFile(this);
                    } catch (IOException ex) {

                    }
                    if (photoFile != null) {
                        imageListAdapter.addFilePath(photoFile.getAbsolutePath());
                        Uri photoURI = Uri.fromFile(photoFile);
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                        startActivityForResult(intent, REQUEST_CODE_PHOTO);
                    }
                }
                break;
            case R.id.btnSave:
                Log.d("DEBUG", "onClick(btnSave) EditDocActivity");
               setLoading(true);
                SaveDoc();
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        Log.d("DEBUG", "onActivityResult EditDocActivity");
        if (requestCode == REQUEST_CODE_PHOTO) {
            if (resultCode == Activity.RESULT_OK) {
                GPSTracker gps = new GPSTracker(this);
                Converter.compressImage(imageListAdapter.getCurrentPath(), Bitmap.CompressFormat.JPEG, 80, 1024);
                if (gps.setGpsToFile(imageListAdapter.getCurrentPath())) {
                    BitmapFactory.Options opt = new BitmapFactory.Options();
                    opt.inSampleSize = 8;
                    Bitmap bitmap = BitmapFactory.decodeFile(imageListAdapter.getCurrentPath(), opt);
                    imageListAdapter.add(bitmap);
                }else{
                    imageListAdapter.deleteCurrentPath();
                }
            }else if (resultCode == Activity.RESULT_CANCELED) {
                imageListAdapter.deleteCurrentPath();
            }
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if(response.body().getClass() == GetItemImageResponseEnvelope.class){
            Log.d("DEBUG", "AutorizationOK(getItemImage) EditDocActivity");
            GetItemImageResponseEnvelope responseEnvelope = (GetItemImageResponseEnvelope) response.body();
            if (responseEnvelope != null){
                rvImageFromBase.setAdapter(imageListAdapter);
                imageListAdapter.add(Converter.getBitmapFromBase64Stirng(this, responseEnvelope.getImage()));
                curItem++;
                getImageFromApi(detectionDoc.getId(), curItem);
            }else{
                setLoading(false);
            }
        }
        if (response.body().getClass() == AddPhotoResponseEnvelope.class){
            Log.d("DEBUG", "AuthorizationOK(addPhoto) EditDocActivity");
           AddPhotoResponseEnvelope responseEnvelope = (AddPhotoResponseEnvelope) response.body();
            if (responseEnvelope != null) {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                if (responseEnvelope.getBool()) {
                    builder.setTitle("Важное сообщение!")
                            .setMessage("Успешно сохранено")
                            .setCancelable(false)
                            .setNegativeButton("OK",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {

                                            dialog.cancel();
                                            finish();

                                        }
                                    });
                    AlertDialog alert = builder.create();
                    alert.show();
                } else {
                    builder.setTitle("Важное сообщение!")
                            .setMessage("Ошибка при сохранении.")
                            .setCancelable(false)
                            .setNegativeButton("OK",
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int id) {

                                            dialog.cancel();

                                        }
                                    });
                    AlertDialog alert = builder.create();
                    alert.show();
                }
            } else {
                setLoading(false);
            }
        }
    }

    @Override
    public void AuthorizationBad(Response response) {
        Log.d("ERROR", response.message());
        setLoading(false);

    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Log.d("ERROR", t.getLocalizedMessage());
        setLoading(false);

    }

    private void getImageFromApi(String docId, int index){
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetItemImageResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetItemImage(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetItemImageRequestEnvelope(docId, index)
        ).enqueue(call);
    }

       @Override
    protected void onDestroy() {
        super.onDestroy();
           Log.d("DEBUG", "onDestroy EditDocActivity");
        imageListAdapter.clear();
    }

    private void SaveDoc(){
        Log.d("DEBUG", "SaveDoc EditDocActivity");
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<AddPhotoRequestEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        ImageList imageList =  new ImageList();
        int count = imageListAdapter.getFilePathCount();
        if (count>0){
            for (int i = 0; i < count; i++){
                imageList.addImage(new Image().setData(Converter.encodeToBase64(imageListAdapter.getFilePath(i))));
            }
        }else{
            imageList.addImage(new Image().setData(""));
        }

        retrofitService.executeAddPhoto(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new AddPhotoRequestEnvelope(
                        detectionDoc.getId(),
                        imageList)
        ).enqueue(call);
    }

    private void setLoading(Boolean bool) {
        Log.d("DEBUG", "setLoading("+bool.toString()+") EditDocActivity");
        AnimationDrawable animation = (AnimationDrawable)imvLoading.getBackground();
        if (bool) {
            imvLoading.setVisibility(View.VISIBLE);
            animation.start();
            svAll.setVisibility(View.GONE);
        } else {
            imvLoading.setVisibility(View.GONE);
            animation.stop();
            svAll.setVisibility(View.VISIBLE);
        }
    }
}
