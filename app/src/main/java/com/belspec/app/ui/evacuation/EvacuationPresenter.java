package com.belspec.app.ui.evacuation;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;

import com.belspec.app.adapters.ImageListAdapter;
import com.belspec.app.gps.GPSTracker;
import com.belspec.app.retrofit.Api;
import com.belspec.app.retrofit.RetrofitService;
import com.belspec.app.retrofit.model.DetectionDoc;
import com.belspec.app.retrofit.model.Image;
import com.belspec.app.retrofit.model.ImageList;
import com.belspec.app.retrofit.model.Parking;
import com.belspec.app.retrofit.model.createEvacuation.request.CreateEvacuationRequestEnvelope;
import com.belspec.app.retrofit.model.createEvacuation.response.CreateEvacuationResponseEnvelope;
import com.belspec.app.retrofit.model.getItemImage.request.GetItemImageRequestEnvelope;
import com.belspec.app.retrofit.model.getItemImage.response.GetItemImageResponseEnvelope;
import com.belspec.app.retrofit.model.getParkingList.request.GetParkingListRequestEnvelope;
import com.belspec.app.retrofit.model.getParkingList.response.GetParkingListResponseEnvelope;
import com.belspec.app.utils.Converter;
import com.belspec.app.utils.Encode;
import com.belspec.app.utils.FileManager;
import com.belspec.app.utils.UserManager;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


class EvacuationPresenter implements EvacuationContract.Presenter {
    private EvacuationContract.View view;
    private DetectionDoc detectionDoc;
    private Context context;
    private int curItem;
    private ArrayList<String> stringArrayParkingList;
    private ImageListAdapter imageListAdapter;

    EvacuationPresenter(EvacuationContract.View view){
        this.view = view;
        this.context = view.getViewContext();
    }

    @Override
    public void onCreate(Bundle savedInstanceState, Intent intent) {
        detectionDoc = intent.getParcelableExtra(DetectionDoc.class.getCanonicalName());
        if(detectionDoc != null){
            view.setManufacture(detectionDoc.getManufacture());
            view.setModel(detectionDoc.getModel());
            view.setDocId(detectionDoc.getId());
            view.setCarId(detectionDoc.getCarId());
            SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
            view.setDateDetection(df.format(detectionDoc.getDateDetection()));
            view.setContractor(detectionDoc.getContractor());
            view.setAvatar(Converter.getBitmapFromBase64Stirng(context, detectionDoc.getImage()));
        }
        if (savedInstanceState == null){
            view.setLoading(true);
            imageListAdapter = new ImageListAdapter();
            view.setNoAction(true);
            view.setAdapter(imageListAdapter);
            curItem = 1;
            getImageFromApi(detectionDoc.getId(), curItem);
            getParkingListFromApi();
        }else{
            imageListAdapter = savedInstanceState.getParcelable("imageListAdapter");
            if(imageListAdapter != null)
                view.setAdapter(imageListAdapter);
            else
                view.setAdapter(new ImageListAdapter());
            stringArrayParkingList = savedInstanceState.getStringArrayList("parkingList");
            if (stringArrayParkingList !=null){
                view.setParkings(stringArrayParkingList);
                view.setParkingItemSelection(savedInstanceState.getInt("itemParkingPosition"));
                view.setLoading(false);
            }else{
                getParkingListFromApi();
            }
        }
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        outState.putStringArrayList("parkingList", stringArrayParkingList);
        outState.putInt("itemParkingPosition", view.getParkingSelectedPosition());
        outState.putParcelable("imageListAdapter", imageListAdapter);
    }

    @Override
    public void onCreateEvacuationClick() {
        view.setLoading(true);
        createEvacuation();
    }

    @Override
    public void onAddPhotoClick() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        File photoFile = null;
        try {
            photoFile = FileManager.createImageFile(context);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        if (photoFile != null) {
            imageListAdapter.addFilePath(photoFile.getAbsolutePath());
            Uri photoURI = Uri.fromFile(photoFile);
            intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
            view.getPhoto(intent);
            }
    }

    @Override
    public void onAddPhoto() {
        GPSTracker gps = GPSTracker.getInstance();
        Converter.compressImage(imageListAdapter.getCurrentPath(), Bitmap.CompressFormat.JPEG, 80, 1024);
        if (gps.setGpsToFile(imageListAdapter.getCurrentPath())) {
            BitmapFactory.Options opt = new BitmapFactory.Options();
            opt.inSampleSize = 8;
            Bitmap bitmap = BitmapFactory.decodeFile(imageListAdapter.getCurrentPath(), opt);
            imageListAdapter.add(bitmap);
        }else{
            imageListAdapter.deleteCurrentPath();
        }
    }

    @Override
    public void onAddPhotoCancel() {
        imageListAdapter.deleteCurrentPath();
    }

    private void createEvacuation(){
        RetrofitService retrofitService = Api.createRetrofitService();
        ImageList imageList =  new ImageList();
        int count = imageListAdapter.getFilePathCount();
        if (count>0){
            for (int i = 0; i < count; i++){
                imageList.addImage(new Image().setData(Converter.encodeToBase64(imageListAdapter.getFilePath(i))));
            }
        }else{
            imageList.addImage(new Image().setData(""));
        }
        int order = 1;
        if(view.getNoAction()){
            order = 3;
        }else if (view.getNoOwner()){
            order = 2;
        }else if(view.getNoCarId()){
            order = 1;
        }
        retrofitService.executeCreateEvacuation(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new CreateEvacuationRequestEnvelope(
                        detectionDoc.getId(),
                        order,
                        UserManager.getInstanse().getmLogin(),
                        view.getParkingSelectedItem(),
                        imageList)
        ).enqueue(new Callback<CreateEvacuationResponseEnvelope>() {
            @Override
            public void onResponse(Call<CreateEvacuationResponseEnvelope> call, Response<CreateEvacuationResponseEnvelope> response) {
                if(response.isSuccessful()){
                    CreateEvacuationResponseEnvelope responseEnvelope = response.body();
                    if (responseEnvelope != null) {
                        view.showMessage(responseEnvelope.getData());
                    } else {
                        view.setLoading(false);
                    }
                }else{
                    Log.d("ERROR", response.message());
                    view.setLoading(false);
                }
            }

            @Override
            public void onFailure(Call<CreateEvacuationResponseEnvelope> call, Throwable t) {
                view.setLoading(false);
                Log.d("ERROR", t.getMessage());
            }
        });
    }

    private void getImageFromApi(String docId, int index){
        RetrofitService retrofitService = Api.createRetrofitService();
        retrofitService.executeGetItemImage(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetItemImageRequestEnvelope(docId, index)
        ).enqueue(new Callback<GetItemImageResponseEnvelope>() {
            @Override
            public void onResponse(Call<GetItemImageResponseEnvelope> call, Response<GetItemImageResponseEnvelope> response) {
                if(response.isSuccessful()){
                    GetItemImageResponseEnvelope responseEnvelope = response.body();
                    if (responseEnvelope != null) {
                        view.setAdapter(imageListAdapter);
                        imageListAdapter.add(Converter.getBitmapFromBase64Stirng(context, responseEnvelope.getImage()));
                        curItem++;
                        getImageFromApi(detectionDoc.getId(), curItem);
                    } else {
                        view.setLoading(false);
                    }
                }else {
                    Log.d("ERROR", response.message());
                    view.setLoading(false);
                }
            }

            @Override
            public void onFailure(Call<GetItemImageResponseEnvelope> call, Throwable t) {
                view.setLoading(false);
                Log.d("ERROR", t.getMessage());
            }
        });
    }

    private void getParkingListFromApi(){
        view.setLoading(true);
        RetrofitService retrofitService = Api.createRetrofitService();
        retrofitService.executeGetParkingList(
                Encode.getBasicAuthTemplate(
                        UserManager.getInstanse().getmLogin(),
                        UserManager.getInstanse().getmPassword()
                ),
                new GetParkingListRequestEnvelope()
        ).enqueue(new Callback<GetParkingListResponseEnvelope>() {
            @Override
            public void onResponse(Call<GetParkingListResponseEnvelope> call, Response<GetParkingListResponseEnvelope> response) {
                if(response.isSuccessful()){
                    GetParkingListResponseEnvelope responseEnvelope = response.body();
                    if (responseEnvelope != null){
                        List<Parking> parkingList= responseEnvelope.getBody().getParkingList();
                        stringArrayParkingList = new ArrayList<>();
                        for ( Parking parking : parkingList) {
                            stringArrayParkingList.add(parking.getName());
                        }
                        view.setParkings(stringArrayParkingList);
                    }
                    view.setLoading(false);
                }else{
                    Log.d("ERROR", response.message());
                    view.setLoading(false);
                }
            }

            @Override
            public void onFailure(Call<GetParkingListResponseEnvelope> call, Throwable t) {
                view.setLoading(false);
                Log.d("ERROR", t.getMessage());
            }
        });
    }


}
