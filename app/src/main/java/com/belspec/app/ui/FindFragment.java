package com.belspec.app.ui;

import android.content.Intent;
import android.graphics.drawable.AnimationDrawable;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.belspec.app.R;
import com.belspec.app.adapters.DetectionDocListAdapter;
import com.belspec.app.interfaces.EndlessRecyclerViewScrollLisnener;
import com.belspec.app.interfaces.MyCallback;
import com.belspec.app.interfaces.NetworkDataUpdate;
import com.belspec.app.interfaces.RecyclerItemClickListener;
import com.belspec.app.interfaces.ResponseListener;
import com.belspec.app.retrofit.Api;
import com.belspec.app.retrofit.RetrofitService;
import com.belspec.app.retrofit.model.DetectionDoc;
import com.belspec.app.retrofit.model.getDetectionList.request.GetDetectionListRequestEnvelope;
import com.belspec.app.retrofit.model.getDetectionList.response.GetDetectionListResponseEnvelope;
import com.belspec.app.utils.Encode;
import com.belspec.app.utils.NetworkDataManager;
import com.belspec.app.utils.UserManager;
import com.belspec.app.utils.Utils;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Response;


public class FindFragment extends Fragment implements View.OnClickListener, ResponseListener, TextView.OnEditorActionListener, NetworkDataUpdate {
    Button btnFind;
    EditText edtCarId;
    EditText edtVin;
    AutoCompleteTextView actvManuf;
    AutoCompleteTextView actvContractor;
    RecyclerView rvDetectionList;
    View mView;
    ImageView imvLoading;
    EndlessRecyclerViewScrollLisnener endlessRecyclerViewScrollLisnener;
    LinearLayoutManager llm;
    DetectionDocListAdapter detectionDocListAdapter;
    RelativeLayout rllContent;
    int currentPage;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mView = inflater.inflate(R.layout.find_fragment, container, false);
        initViews();
        initComponents(savedInstanceState);
        return mView;
    }

    private void initViews() {
        btnFind = (Button) mView.findViewById(R.id.btnFindDetection);
        edtCarId = (EditText) mView.findViewById(R.id.edtFindByCarId);
        edtCarId.setImeActionLabel("Search", EditorInfo.IME_ACTION_SEARCH);
        edtCarId.setOnEditorActionListener(this);
        edtVin = (EditText) mView.findViewById(R.id.edtFindByVin);
        edtVin.setImeActionLabel("Search", EditorInfo.IME_ACTION_SEARCH);
        edtVin.setOnEditorActionListener(this);
        rvDetectionList = (RecyclerView) mView.findViewById(R.id.rvDetectionList);
        actvContractor = (AutoCompleteTextView) mView.findViewById(R.id.actvFindByContractor);
        actvManuf = (AutoCompleteTextView) mView.findViewById(R.id.actvFindByManufacture);
        actvManuf.setImeActionLabel("Search", EditorInfo.IME_ACTION_SEARCH);
        actvManuf.setOnEditorActionListener(this);
        imvLoading = (ImageView) mView.findViewById(R.id.imvLoading);
        imvLoading.setBackgroundResource(R.drawable.pb_loading);
        rllContent = (RelativeLayout) mView.findViewById(R.id.rllContent);
    }

    private void initComponents(Bundle savedInstanceState) {
        llm = new LinearLayoutManager(getActivity());
        endlessRecyclerViewScrollLisnener = new EndlessRecyclerViewScrollLisnener(llm) {
            @Override
            public void onLoadMore(int page, int totalItemsCount) {
                currentPage = page;
                loadMoreDataFromServer(page);
            }
        };
        btnFind.setOnClickListener(this);
        rvDetectionList.setLayoutManager(llm);
        rvDetectionList.addOnScrollListener(endlessRecyclerViewScrollLisnener);
        rvDetectionList.addOnItemTouchListener(new RecyclerItemClickListener(getActivity(), new RecyclerItemClickListener.OnItemClickListener() {
            @Override
            public void onItemClick(View view, int position) {
                Intent intent = new Intent(getActivity(), EvacuationActivity.class);
                intent.putExtra(DetectionDoc.class.getCanonicalName(), detectionDocListAdapter.getItem(position));
                startActivity(intent);
            }
        }));
        if (savedInstanceState == null) {
            detectionDocListAdapter = new DetectionDocListAdapter();
            rvDetectionList.setAdapter(detectionDocListAdapter);
            currentPage = 0;
            setLoading(true);
            NetworkDataManager networkDataManager = new NetworkDataManager(this);
            networkDataManager.getDefaultData();
        } else {
            currentPage = savedInstanceState.getInt("currentPage");
            endlessRecyclerViewScrollLisnener.setCurrentPage(currentPage);
            ArrayList<DetectionDoc> detectionDocs = savedInstanceState.getParcelableArrayList("docList");
            detectionDocListAdapter = new DetectionDocListAdapter(detectionDocs);
            rvDetectionList.setAdapter(detectionDocListAdapter);
        }


    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt("currentPage", currentPage);
        outState.putParcelableArrayList("docList", ((DetectionDocListAdapter) rvDetectionList.getAdapter()).getDetectionDocList());
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btnFindDetection:
                Log.d("DEBUG", "onClick(btnFindDetection) FindFragment");
                detectionDocListAdapter = new DetectionDocListAdapter();
                detectionDocListAdapter.notifyDataSetChanged();
                rvDetectionList.setAdapter(detectionDocListAdapter);
                setLoading(true);
                Utils.hideKeyboard(getActivity());
                loadMoreDataFromServer(1);
                break;
        }
    }

    @Override
    public void AuthorizationOK(Response response) {
        if (response.body().getClass() == GetDetectionListResponseEnvelope.class) {
            setLoading(false);
            GetDetectionListResponseEnvelope responseEnvelope = (GetDetectionListResponseEnvelope) response.body();
            List<DetectionDoc> detectionDocs = responseEnvelope.getDetectionList();
            if (detectionDocs != null) {
                detectionDocListAdapter.addDetectionList(detectionDocs);

            } else {
                Toast.makeText(getActivity(), "No more element", Toast.LENGTH_SHORT).show();
            }
        }
    }

    @Override
    public void AuthorizationBad(Response response) {
        Toast.makeText(this.getActivity(), "Wrong authorization. Response code: " + response.code() + " " + response.message(), Toast.LENGTH_SHORT).show();
        setLoading(false);
    }

    @Override
    public void AuthorizationFail(Throwable t) {
        Toast.makeText(this.getActivity(), "Network fail. " + t.getMessage(), Toast.LENGTH_SHORT).show();
        setLoading(false);
    }

    public void loadMoreDataFromServer(int page) {
        RetrofitService retrofitService = Api.createRetrofitService();
        MyCallback<GetDetectionListResponseEnvelope> call = new MyCallback<>();
        call.addResponseListener(this);
        retrofitService.executeGetDetectionList(Encode.getBasicAuthTemplate(
                UserManager.getInstanse().getmLogin(),
                UserManager.getInstanse().getmPassword()
        ), new GetDetectionListRequestEnvelope(
                actvManuf.getText().toString(),
                actvContractor.getText().toString(),
                edtCarId.getText().toString(),
                edtVin.getText().toString(),
                page, 1
        )).enqueue(call);

    }

    private void setLoading(Boolean bool) {
        Log.d("DEBUG", "setLoading(" + bool.toString() + ") FindFragment");
        AnimationDrawable animationDrawable = (AnimationDrawable) imvLoading.getBackground();
        if (bool) {
            rvDetectionList.setVisibility(View.GONE);
            rllContent.setVisibility(View.GONE);
            btnFind.setVisibility(View.GONE);
            imvLoading.setVisibility(View.VISIBLE);
            animationDrawable.start();
        } else {
            imvLoading.setVisibility(View.GONE);
            animationDrawable.stop();
            rllContent.setVisibility(View.VISIBLE);
            btnFind.setVisibility(View.VISIBLE);
            rvDetectionList.setVisibility(View.VISIBLE);
        }

    }

    @Override
    public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
        switch (i) {
            case EditorInfo.IME_ACTION_SEARCH:
                onClick(btnFind);
                return true;
        }
        return false;
    }

    @Override
    public void onNetworkDataUpdate(NetworkDataManager netDataManager) {
        ArrayAdapter<String> arrayAdapterContractor = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, netDataManager.getContractorListAsString());
        actvContractor.setAdapter(arrayAdapterContractor);
        ArrayAdapter<String> arrayAdapterManufacture = new ArrayAdapter<>(this.getActivity(), R.layout.spinner_item, netDataManager.getManufactureListAsString());
        actvManuf.setAdapter(arrayAdapterManufacture);
        setLoading(false);
    }
}
